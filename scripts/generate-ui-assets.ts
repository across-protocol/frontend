import { writeFileSync, copyFileSync } from "fs";
import * as prettier from "prettier";
import { camelCase, capitalize } from "lodash-es";

import * as chainConfigs from "./chain-configs";
import * as externConfigs from "./extern-configs";

const chainsConstantsFileTargetDir = process.cwd() + "/src/constants/chains";
const chainsConstantsFilePath = chainsConstantsFileTargetDir + "/configs.ts";
const chainAssetsTargetDir = process.cwd() + "/src/assets/chain-logos";
const externAssetsTargetDir = process.cwd() + "/src/assets/extern-logos";

async function generateUiAssets() {
  const chainsFileImports: string[] = [
    "// This file is auto-generated by scripts/generate-ui-assets.ts",
    'import { defineChain } from "viem";',
  ];
  const chainsFileContent: string[] = [];
  const chainVarNames: string[] = [];
  const chainViemVarNames: string[] = [];
  const externVarNames: string[] = [];

  for (const [chainKey, chainConfig] of Object.entries(chainConfigs)) {
    const { chainId, logoPath, grayscaleLogoPath, name, fullName } =
      chainConfig;

    // Copy logos into assets directory
    const assetFileNameBase = chainKey.toLowerCase().replace("_", "-");
    const chainLogoTargetFileName = assetFileNameBase + ".svg";
    const chainGrayscaleLogoTargetFileName =
      assetFileNameBase + "-grayscale.svg";
    const chainConfigSrcDir =
      process.cwd() + "/scripts/chain-configs/" + assetFileNameBase + "/";
    copyFileSync(
      chainConfigSrcDir + logoPath,
      chainAssetsTargetDir + "/" + chainLogoTargetFileName
    );
    copyFileSync(
      chainConfigSrcDir + grayscaleLogoPath,
      chainAssetsTargetDir + "/" + chainGrayscaleLogoTargetFileName
    );

    // Generate chain constants file
    const chainVarName = camelCase(name);
    const chainLogoVarName = camelCase(name + "Logo");
    const chainGrayscaleLogoVarName = camelCase(name + "GrayscaleLogo");
    const chainLogoSvgVarName = chainLogoVarName + "Svg";
    const chainGrayscaleLogoSvgVarName = chainGrayscaleLogoVarName + "Svg";
    chainsFileImports.push(`
      import ${chainLogoVarName} from "assets/chain-logos/${chainLogoTargetFileName}";
      import ${chainGrayscaleLogoVarName} from "assets/chain-logos/${chainGrayscaleLogoTargetFileName}";
      import {ReactComponent as ${chainLogoSvgVarName}} from "assets/chain-logos/${chainLogoTargetFileName}";
      import {ReactComponent as ${chainGrayscaleLogoSvgVarName}} from "assets/chain-logos/${chainGrayscaleLogoTargetFileName}";
    `);
    chainsFileContent.push(`
      export const ${chainVarName} = {
        name: "${name}",
        fullName: "${fullName || capitalize(name)}",
        chainId: ${chainId},
        logoURI: ${chainLogoVarName},
        grayscaleLogoURI: ${chainGrayscaleLogoVarName},
        logoSvg: ${chainLogoSvgVarName},
        grayscaleLogoSvg: ${chainGrayscaleLogoSvgVarName},
        rpcUrl: "${chainConfig.publicRpcUrl}",
        explorerUrl: "${chainConfig.blockExplorer}",
        constructExplorerLink: (txHash: string) => \`\${${chainVarName}.explorerUrl}/tx/\${txHash}\`,
        nativeCurrencySymbol: "${chainConfig.nativeToken}",
        customRpcUrl: process.env.REACT_APP_CHAIN_${chainId}_PROVIDER_URL,
        pollingInterval: ${(chainConfig.blockTimeSeconds || 15) * 1000},
      };
    `);
    chainsFileContent.push(`
      export const ${chainVarName}_viem = defineChain({
        id: ${chainVarName}.chainId,
        name: ${chainVarName}.name,
        nativeCurrency: {
          name: ${chainVarName}.nativeCurrencySymbol,
          symbol: ${chainVarName}.nativeCurrencySymbol,
          decimals: 18,
        },
        rpcUrls: {
          default: {
            http: [
              ${chainVarName}.rpcUrl,
              ${chainVarName}.customRpcUrl ? ${chainVarName}.customRpcUrl : [],
            ].flat(),
          },
        },
        blockExplorers: {
          default: {
            name: ${chainVarName}.name + " Explorer",
            url: ${chainVarName}.explorerUrl,
          },
        },
      });
    `);
    chainVarNames.push(chainVarName);
    chainViemVarNames.push(chainVarName + "_viem");
  }

  // Process external project configs
  for (const [projectKey, projectConfig] of Object.entries(externConfigs)) {
    if (projectKey === "types") continue; // Skip the types file

    const { projectId, logoPath, grayscaleLogoPath, name, fullName } =
      projectConfig;

    // Copy logos into assets directory
    const assetFileNameBase = projectKey.toLowerCase().replace("_", "-");
    const projectLogoTargetFileName = assetFileNameBase + ".svg";
    const projectGrayscaleLogoTargetFileName =
      assetFileNameBase + "-grayscale.svg";
    const projectConfigSrcDir =
      process.cwd() + "/scripts/extern-configs/" + assetFileNameBase + "/";

    copyFileSync(
      projectConfigSrcDir + logoPath,
      externAssetsTargetDir + "/" + projectLogoTargetFileName
    );
    copyFileSync(
      projectConfigSrcDir + grayscaleLogoPath,
      externAssetsTargetDir + "/" + projectGrayscaleLogoTargetFileName
    );

    // Generate external project constants
    const projectVarName = camelCase(name);
    const projectLogoVarName = camelCase(name + "Logo");
    const projectGrayscaleLogoVarName = camelCase(name + "GrayscaleLogo");
    const projectLogoSvgVarName = projectLogoVarName + "Svg";
    const projectGrayscaleLogoSvgVarName = projectGrayscaleLogoVarName + "Svg";

    chainsFileImports.push(`
      import ${projectLogoVarName} from "assets/extern-logos/${projectLogoTargetFileName}";
      import ${projectGrayscaleLogoVarName} from "assets/extern-logos/${projectGrayscaleLogoTargetFileName}";
      import {ReactComponent as ${projectLogoSvgVarName}} from "assets/extern-logos/${projectLogoTargetFileName}";
      import {ReactComponent as ${projectGrayscaleLogoSvgVarName}} from "assets/extern-logos/${projectGrayscaleLogoTargetFileName}";
    `);

    chainsFileContent.push(`
      export const ${projectVarName} = {
        name: "${name}",
        fullName: "${fullName || capitalize(name)}",
        projectId: "${projectId}",
        logoURI: ${projectLogoVarName},
        grayscaleLogoURI: ${projectGrayscaleLogoVarName},
        logoSvg: ${projectLogoSvgVarName},
        grayscaleLogoSvg: ${projectGrayscaleLogoSvgVarName},
        explorerUrl: "${projectConfig.explorer}",
        rpcUrl: "${projectConfig.publicRpcUrl}",
        intermediaryChain: ${projectConfig.intermediaryChain},
      };
    `);
    externVarNames.push(projectVarName);
  }

  chainsFileContent.push(`
    export const chainConfigs = [${chainVarNames.join(", ")}].reduce((acc, chain) => {
      acc[chain.chainId] = chain;
      return acc;
    }, {} as Record<number, typeof ${chainVarNames[0]}>);
  `);
  chainsFileContent.push(`
    export const chains_viem = [${chainViemVarNames.join(", ")}] as const;
  `);

  chainsFileContent.push(`
    export const externConfigs = [${externVarNames.join(", ")}].reduce((acc, extern) => {
      acc[extern.projectId] = extern;
      return acc;
    }, {} as Record<string, typeof ${externVarNames[0]}>);
  `);

  // Write chains file
  const chainsFileContentStr =
    chainsFileImports.join("\n") + chainsFileContent.join("\n");
  writeFileSync(
    chainsConstantsFilePath,
    await prettier.format(chainsFileContentStr, { parser: "typescript" })
  );
}

generateUiAssets();

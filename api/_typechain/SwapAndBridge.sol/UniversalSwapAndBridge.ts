/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "@across-protocol/contracts/dist/typechain/common";

export declare namespace SwapAndBridgeBase {
  export type DepositDataStruct = {
    outputToken: string;
    outputAmount: BigNumberish;
    depositor: string;
    recipient: string;
    destinationChainid: BigNumberish;
    exclusiveRelayer: string;
    quoteTimestamp: BigNumberish;
    fillDeadline: BigNumberish;
    exclusivityDeadline: BigNumberish;
    message: BytesLike;
  };

  export type DepositDataStructOutput = [
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    string,
    number,
    number,
    number,
    string,
  ] & {
    outputToken: string;
    outputAmount: BigNumber;
    depositor: string;
    recipient: string;
    destinationChainid: BigNumber;
    exclusiveRelayer: string;
    quoteTimestamp: number;
    fillDeadline: number;
    exclusivityDeadline: number;
    message: string;
  };
}

export interface UniversalSwapAndBridgeInterface extends utils.Interface {
  functions: {
    "EXCHANGE()": FunctionFragment;
    "SPOKE_POOL()": FunctionFragment;
    "allowedSelectors(bytes4)": FunctionFragment;
    "depositWithAuthorization(address,uint256,(address,uint256,address,address,uint256,address,uint32,uint32,uint32,bytes),uint256,uint256,bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "depositWithPermit(address,uint256,(address,uint256,address,address,uint256,address,uint32,uint32,uint32,bytes),uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "swapAndBridge(address,address,bytes,uint256,uint256,(address,uint256,address,address,uint256,address,uint32,uint32,uint32,bytes))": FunctionFragment;
    "swapAndBridgeWithAuthorization(address,address,bytes,uint256,uint256,(address,uint256,address,address,uint256,address,uint32,uint32,uint32,bytes),uint256,uint256,bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "swapAndBridgeWithPermit(address,address,bytes,uint256,uint256,(address,uint256,address,address,uint256,address,uint32,uint32,uint32,bytes),uint256,uint8,bytes32,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EXCHANGE"
      | "SPOKE_POOL"
      | "allowedSelectors"
      | "depositWithAuthorization"
      | "depositWithPermit"
      | "multicall"
      | "swapAndBridge"
      | "swapAndBridgeWithAuthorization"
      | "swapAndBridgeWithPermit"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "EXCHANGE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SPOKE_POOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowedSelectors",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWithAuthorization",
    values: [
      string,
      BigNumberish,
      SwapAndBridgeBase.DepositDataStruct,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike,
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWithPermit",
    values: [
      string,
      BigNumberish,
      SwapAndBridgeBase.DepositDataStruct,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndBridge",
    values: [
      string,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      SwapAndBridgeBase.DepositDataStruct,
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndBridgeWithAuthorization",
    values: [
      string,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      SwapAndBridgeBase.DepositDataStruct,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike,
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndBridgeWithPermit",
    values: [
      string,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      SwapAndBridgeBase.DepositDataStruct,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
    ]
  ): string;

  decodeFunctionResult(functionFragment: "EXCHANGE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SPOKE_POOL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositWithAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapAndBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndBridgeWithAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndBridgeWithPermit",
    data: BytesLike
  ): Result;

  events: {
    "SwapBeforeBridge(address,address,address,uint256,uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SwapBeforeBridge"): EventFragment;
}

export interface SwapBeforeBridgeEventObject {
  exchange: string;
  swapToken: string;
  acrossInputToken: string;
  swapTokenAmount: BigNumber;
  acrossInputAmount: BigNumber;
  acrossOutputToken: string;
  acrossOutputAmount: BigNumber;
}
export type SwapBeforeBridgeEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, string, BigNumber],
  SwapBeforeBridgeEventObject
>;

export type SwapBeforeBridgeEventFilter =
  TypedEventFilter<SwapBeforeBridgeEvent>;

export interface UniversalSwapAndBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UniversalSwapAndBridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EXCHANGE(overrides?: CallOverrides): Promise<[string]>;

    SPOKE_POOL(overrides?: CallOverrides): Promise<[string]>;

    allowedSelectors(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    depositWithAuthorization(
      acrossInputToken: string,
      acrossInputAmount: BigNumberish,
      depositData: SwapAndBridgeBase.DepositDataStruct,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositWithPermit(
      acrossInputToken: string,
      acrossInputAmount: BigNumberish,
      depositData: SwapAndBridgeBase.DepositDataStruct,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapAndBridge(
      swapToken: string,
      acrossInputToken: string,
      routerCalldata: BytesLike,
      swapTokenAmount: BigNumberish,
      minExpectedInputTokenAmount: BigNumberish,
      depositData: SwapAndBridgeBase.DepositDataStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapAndBridgeWithAuthorization(
      swapToken: string,
      acrossInputToken: string,
      routerCalldata: BytesLike,
      swapTokenAmount: BigNumberish,
      minExpectedInputTokenAmount: BigNumberish,
      depositData: SwapAndBridgeBase.DepositDataStruct,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapAndBridgeWithPermit(
      swapToken: string,
      acrossInputToken: string,
      routerCalldata: BytesLike,
      swapTokenAmount: BigNumberish,
      minExpectedInputTokenAmount: BigNumberish,
      depositData: SwapAndBridgeBase.DepositDataStruct,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  EXCHANGE(overrides?: CallOverrides): Promise<string>;

  SPOKE_POOL(overrides?: CallOverrides): Promise<string>;

  allowedSelectors(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  depositWithAuthorization(
    acrossInputToken: string,
    acrossInputAmount: BigNumberish,
    depositData: SwapAndBridgeBase.DepositDataStruct,
    validAfter: BigNumberish,
    validBefore: BigNumberish,
    nonce: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositWithPermit(
    acrossInputToken: string,
    acrossInputAmount: BigNumberish,
    depositData: SwapAndBridgeBase.DepositDataStruct,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapAndBridge(
    swapToken: string,
    acrossInputToken: string,
    routerCalldata: BytesLike,
    swapTokenAmount: BigNumberish,
    minExpectedInputTokenAmount: BigNumberish,
    depositData: SwapAndBridgeBase.DepositDataStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapAndBridgeWithAuthorization(
    swapToken: string,
    acrossInputToken: string,
    routerCalldata: BytesLike,
    swapTokenAmount: BigNumberish,
    minExpectedInputTokenAmount: BigNumberish,
    depositData: SwapAndBridgeBase.DepositDataStruct,
    validAfter: BigNumberish,
    validBefore: BigNumberish,
    nonce: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapAndBridgeWithPermit(
    swapToken: string,
    acrossInputToken: string,
    routerCalldata: BytesLike,
    swapTokenAmount: BigNumberish,
    minExpectedInputTokenAmount: BigNumberish,
    depositData: SwapAndBridgeBase.DepositDataStruct,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    EXCHANGE(overrides?: CallOverrides): Promise<string>;

    SPOKE_POOL(overrides?: CallOverrides): Promise<string>;

    allowedSelectors(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    depositWithAuthorization(
      acrossInputToken: string,
      acrossInputAmount: BigNumberish,
      depositData: SwapAndBridgeBase.DepositDataStruct,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    depositWithPermit(
      acrossInputToken: string,
      acrossInputAmount: BigNumberish,
      depositData: SwapAndBridgeBase.DepositDataStruct,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    swapAndBridge(
      swapToken: string,
      acrossInputToken: string,
      routerCalldata: BytesLike,
      swapTokenAmount: BigNumberish,
      minExpectedInputTokenAmount: BigNumberish,
      depositData: SwapAndBridgeBase.DepositDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAndBridgeWithAuthorization(
      swapToken: string,
      acrossInputToken: string,
      routerCalldata: BytesLike,
      swapTokenAmount: BigNumberish,
      minExpectedInputTokenAmount: BigNumberish,
      depositData: SwapAndBridgeBase.DepositDataStruct,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAndBridgeWithPermit(
      swapToken: string,
      acrossInputToken: string,
      routerCalldata: BytesLike,
      swapTokenAmount: BigNumberish,
      minExpectedInputTokenAmount: BigNumberish,
      depositData: SwapAndBridgeBase.DepositDataStruct,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SwapBeforeBridge(address,address,address,uint256,uint256,address,uint256)"(
      exchange?: null,
      swapToken?: string | null,
      acrossInputToken?: string | null,
      swapTokenAmount?: null,
      acrossInputAmount?: null,
      acrossOutputToken?: string | null,
      acrossOutputAmount?: null
    ): SwapBeforeBridgeEventFilter;
    SwapBeforeBridge(
      exchange?: null,
      swapToken?: string | null,
      acrossInputToken?: string | null,
      swapTokenAmount?: null,
      acrossInputAmount?: null,
      acrossOutputToken?: string | null,
      acrossOutputAmount?: null
    ): SwapBeforeBridgeEventFilter;
  };

  estimateGas: {
    EXCHANGE(overrides?: CallOverrides): Promise<BigNumber>;

    SPOKE_POOL(overrides?: CallOverrides): Promise<BigNumber>;

    allowedSelectors(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositWithAuthorization(
      acrossInputToken: string,
      acrossInputAmount: BigNumberish,
      depositData: SwapAndBridgeBase.DepositDataStruct,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositWithPermit(
      acrossInputToken: string,
      acrossInputAmount: BigNumberish,
      depositData: SwapAndBridgeBase.DepositDataStruct,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swapAndBridge(
      swapToken: string,
      acrossInputToken: string,
      routerCalldata: BytesLike,
      swapTokenAmount: BigNumberish,
      minExpectedInputTokenAmount: BigNumberish,
      depositData: SwapAndBridgeBase.DepositDataStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    swapAndBridgeWithAuthorization(
      swapToken: string,
      acrossInputToken: string,
      routerCalldata: BytesLike,
      swapTokenAmount: BigNumberish,
      minExpectedInputTokenAmount: BigNumberish,
      depositData: SwapAndBridgeBase.DepositDataStruct,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swapAndBridgeWithPermit(
      swapToken: string,
      acrossInputToken: string,
      routerCalldata: BytesLike,
      swapTokenAmount: BigNumberish,
      minExpectedInputTokenAmount: BigNumberish,
      depositData: SwapAndBridgeBase.DepositDataStruct,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EXCHANGE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SPOKE_POOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowedSelectors(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositWithAuthorization(
      acrossInputToken: string,
      acrossInputAmount: BigNumberish,
      depositData: SwapAndBridgeBase.DepositDataStruct,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositWithPermit(
      acrossInputToken: string,
      acrossInputAmount: BigNumberish,
      depositData: SwapAndBridgeBase.DepositDataStruct,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapAndBridge(
      swapToken: string,
      acrossInputToken: string,
      routerCalldata: BytesLike,
      swapTokenAmount: BigNumberish,
      minExpectedInputTokenAmount: BigNumberish,
      depositData: SwapAndBridgeBase.DepositDataStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapAndBridgeWithAuthorization(
      swapToken: string,
      acrossInputToken: string,
      routerCalldata: BytesLike,
      swapTokenAmount: BigNumberish,
      minExpectedInputTokenAmount: BigNumberish,
      depositData: SwapAndBridgeBase.DepositDataStruct,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapAndBridgeWithPermit(
      swapToken: string,
      acrossInputToken: string,
      routerCalldata: BytesLike,
      swapTokenAmount: BigNumberish,
      minExpectedInputTokenAmount: BigNumberish,
      depositData: SwapAndBridgeBase.DepositDataStruct,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}

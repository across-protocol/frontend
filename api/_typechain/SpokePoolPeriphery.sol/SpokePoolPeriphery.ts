/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "@across-protocol/contracts/dist/typechain/common";

export declare namespace SpokePoolPeripheryInterface {
  export type FeesStruct = { amount: BigNumberish; recipient: string };

  export type FeesStructOutput = [BigNumber, string] & {
    amount: BigNumber;
    recipient: string;
  };

  export type BaseDepositDataStruct = {
    inputToken: string;
    outputToken: BytesLike;
    outputAmount: BigNumberish;
    depositor: string;
    recipient: BytesLike;
    destinationChainId: BigNumberish;
    exclusiveRelayer: BytesLike;
    quoteTimestamp: BigNumberish;
    fillDeadline: BigNumberish;
    exclusivityParameter: BigNumberish;
    message: BytesLike;
  };

  export type BaseDepositDataStructOutput = [
    string,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    string,
    number,
    number,
    number,
    string,
  ] & {
    inputToken: string;
    outputToken: string;
    outputAmount: BigNumber;
    depositor: string;
    recipient: string;
    destinationChainId: BigNumber;
    exclusiveRelayer: string;
    quoteTimestamp: number;
    fillDeadline: number;
    exclusivityParameter: number;
    message: string;
  };

  export type DepositDataStruct = {
    submissionFees: SpokePoolPeripheryInterface.FeesStruct;
    baseDepositData: SpokePoolPeripheryInterface.BaseDepositDataStruct;
    inputAmount: BigNumberish;
    spokePool: string;
    nonce: BigNumberish;
  };

  export type DepositDataStructOutput = [
    SpokePoolPeripheryInterface.FeesStructOutput,
    SpokePoolPeripheryInterface.BaseDepositDataStructOutput,
    BigNumber,
    string,
    BigNumber,
  ] & {
    submissionFees: SpokePoolPeripheryInterface.FeesStructOutput;
    baseDepositData: SpokePoolPeripheryInterface.BaseDepositDataStructOutput;
    inputAmount: BigNumber;
    spokePool: string;
    nonce: BigNumber;
  };

  export type SwapAndDepositDataStruct = {
    submissionFees: SpokePoolPeripheryInterface.FeesStruct;
    depositData: SpokePoolPeripheryInterface.BaseDepositDataStruct;
    swapToken: string;
    exchange: string;
    transferType: BigNumberish;
    swapTokenAmount: BigNumberish;
    minExpectedInputTokenAmount: BigNumberish;
    routerCalldata: BytesLike;
    enableProportionalAdjustment: boolean;
    spokePool: string;
    nonce: BigNumberish;
  };

  export type SwapAndDepositDataStructOutput = [
    SpokePoolPeripheryInterface.FeesStructOutput,
    SpokePoolPeripheryInterface.BaseDepositDataStructOutput,
    string,
    string,
    number,
    BigNumber,
    BigNumber,
    string,
    boolean,
    string,
    BigNumber,
  ] & {
    submissionFees: SpokePoolPeripheryInterface.FeesStructOutput;
    depositData: SpokePoolPeripheryInterface.BaseDepositDataStructOutput;
    swapToken: string;
    exchange: string;
    transferType: number;
    swapTokenAmount: BigNumber;
    minExpectedInputTokenAmount: BigNumber;
    routerCalldata: string;
    enableProportionalAdjustment: boolean;
    spokePool: string;
    nonce: BigNumber;
  };
}

export declare namespace IPermit2 {
  export type TokenPermissionsStruct = { token: string; amount: BigNumberish };

  export type TokenPermissionsStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };

  export type PermitTransferFromStruct = {
    permitted: IPermit2.TokenPermissionsStruct;
    nonce: BigNumberish;
    deadline: BigNumberish;
  };

  export type PermitTransferFromStructOutput = [
    IPermit2.TokenPermissionsStructOutput,
    BigNumber,
    BigNumber,
  ] & {
    permitted: IPermit2.TokenPermissionsStructOutput;
    nonce: BigNumber;
    deadline: BigNumber;
  };
}

export interface SpokePoolPeripheryInterface extends utils.Interface {
  functions: {
    "depositNative(address,bytes32,address,uint256,bytes32,uint256,uint256,bytes32,uint32,uint32,uint32,bytes)": FunctionFragment;
    "depositWithAuthorization(address,((uint256,address),(address,bytes32,uint256,address,bytes32,uint256,bytes32,uint32,uint32,uint32,bytes),uint256,address,uint256),uint256,uint256,bytes,bytes)": FunctionFragment;
    "depositWithPermit(address,((uint256,address),(address,bytes32,uint256,address,bytes32,uint256,bytes32,uint32,uint32,uint32,bytes),uint256,address,uint256),uint256,bytes,bytes)": FunctionFragment;
    "depositWithPermit2(address,((uint256,address),(address,bytes32,uint256,address,bytes32,uint256,bytes32,uint32,uint32,uint32,bytes),uint256,address,uint256),((address,uint256),uint256,uint256),bytes)": FunctionFragment;
    "domainSeparator()": FunctionFragment;
    "eip712Domain()": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "permit2()": FunctionFragment;
    "permitNonces(address)": FunctionFragment;
    "swapAndBridge(((uint256,address),(address,bytes32,uint256,address,bytes32,uint256,bytes32,uint32,uint32,uint32,bytes),address,address,uint8,uint256,uint256,bytes,bool,address,uint256))": FunctionFragment;
    "swapAndBridgeWithAuthorization(address,((uint256,address),(address,bytes32,uint256,address,bytes32,uint256,bytes32,uint32,uint32,uint32,bytes),address,address,uint8,uint256,uint256,bytes,bool,address,uint256),uint256,uint256,bytes,bytes)": FunctionFragment;
    "swapAndBridgeWithPermit(address,((uint256,address),(address,bytes32,uint256,address,bytes32,uint256,bytes32,uint32,uint32,uint32,bytes),address,address,uint8,uint256,uint256,bytes,bool,address,uint256),uint256,bytes,bytes)": FunctionFragment;
    "swapAndBridgeWithPermit2(address,((uint256,address),(address,bytes32,uint256,address,bytes32,uint256,bytes32,uint32,uint32,uint32,bytes),address,address,uint8,uint256,uint256,bytes,bool,address,uint256),((address,uint256),uint256,uint256),bytes)": FunctionFragment;
    "swapProxy()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "depositNative"
      | "depositWithAuthorization"
      | "depositWithPermit"
      | "depositWithPermit2"
      | "domainSeparator"
      | "eip712Domain"
      | "multicall"
      | "permit2"
      | "permitNonces"
      | "swapAndBridge"
      | "swapAndBridgeWithAuthorization"
      | "swapAndBridgeWithPermit"
      | "swapAndBridgeWithPermit2"
      | "swapProxy"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "depositNative",
    values: [
      string,
      BytesLike,
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWithAuthorization",
    values: [
      string,
      SpokePoolPeripheryInterface.DepositDataStruct,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWithPermit",
    values: [
      string,
      SpokePoolPeripheryInterface.DepositDataStruct,
      BigNumberish,
      BytesLike,
      BytesLike,
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWithPermit2",
    values: [
      string,
      SpokePoolPeripheryInterface.DepositDataStruct,
      IPermit2.PermitTransferFromStruct,
      BytesLike,
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "permit2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permitNonces",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndBridge",
    values: [SpokePoolPeripheryInterface.SwapAndDepositDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndBridgeWithAuthorization",
    values: [
      string,
      SpokePoolPeripheryInterface.SwapAndDepositDataStruct,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndBridgeWithPermit",
    values: [
      string,
      SpokePoolPeripheryInterface.SwapAndDepositDataStruct,
      BigNumberish,
      BytesLike,
      BytesLike,
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndBridgeWithPermit2",
    values: [
      string,
      SpokePoolPeripheryInterface.SwapAndDepositDataStruct,
      IPermit2.PermitTransferFromStruct,
      BytesLike,
    ]
  ): string;
  encodeFunctionData(functionFragment: "swapProxy", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "depositNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositWithAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositWithPermit2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permitNonces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndBridgeWithAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndBridgeWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndBridgeWithPermit2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapProxy", data: BytesLike): Result;

  events: {
    "EIP712DomainChanged()": EventFragment;
    "SwapBeforeBridge(address,bytes,address,address,uint256,uint256,bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EIP712DomainChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapBeforeBridge"): EventFragment;
}

export interface EIP712DomainChangedEventObject {}
export type EIP712DomainChangedEvent = TypedEvent<
  [],
  EIP712DomainChangedEventObject
>;

export type EIP712DomainChangedEventFilter =
  TypedEventFilter<EIP712DomainChangedEvent>;

export interface SwapBeforeBridgeEventObject {
  exchange: string;
  exchangeCalldata: string;
  swapToken: string;
  acrossInputToken: string;
  swapTokenAmount: BigNumber;
  acrossInputAmount: BigNumber;
  acrossOutputToken: string;
  acrossOutputAmount: BigNumber;
}
export type SwapBeforeBridgeEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, string, BigNumber],
  SwapBeforeBridgeEventObject
>;

export type SwapBeforeBridgeEventFilter =
  TypedEventFilter<SwapBeforeBridgeEvent>;

export interface SpokePoolPeriphery extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SpokePoolPeripheryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    depositNative(
      spokePool: string,
      recipient: BytesLike,
      inputToken: string,
      inputAmount: BigNumberish,
      outputToken: BytesLike,
      outputAmount: BigNumberish,
      destinationChainId: BigNumberish,
      exclusiveRelayer: BytesLike,
      quoteTimestamp: BigNumberish,
      fillDeadline: BigNumberish,
      exclusivityParameter: BigNumberish,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositWithAuthorization(
      signatureOwner: string,
      depositData: SpokePoolPeripheryInterface.DepositDataStruct,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      receiveWithAuthSignature: BytesLike,
      depositDataSignature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositWithPermit(
      signatureOwner: string,
      depositData: SpokePoolPeripheryInterface.DepositDataStruct,
      deadline: BigNumberish,
      permitSignature: BytesLike,
      depositDataSignature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositWithPermit2(
      signatureOwner: string,
      depositData: SpokePoolPeripheryInterface.DepositDataStruct,
      permit: IPermit2.PermitTransferFromStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    eip712Domain(overrides?: CallOverrides): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    permit2(overrides?: CallOverrides): Promise<[string]>;

    permitNonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    swapAndBridge(
      swapAndDepositData: SpokePoolPeripheryInterface.SwapAndDepositDataStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapAndBridgeWithAuthorization(
      signatureOwner: string,
      swapAndDepositData: SpokePoolPeripheryInterface.SwapAndDepositDataStruct,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      receiveWithAuthSignature: BytesLike,
      swapAndDepositDataSignature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapAndBridgeWithPermit(
      signatureOwner: string,
      swapAndDepositData: SpokePoolPeripheryInterface.SwapAndDepositDataStruct,
      deadline: BigNumberish,
      permitSignature: BytesLike,
      swapAndDepositDataSignature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapAndBridgeWithPermit2(
      signatureOwner: string,
      swapAndDepositData: SpokePoolPeripheryInterface.SwapAndDepositDataStruct,
      permit: IPermit2.PermitTransferFromStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapProxy(overrides?: CallOverrides): Promise<[string]>;
  };

  depositNative(
    spokePool: string,
    recipient: BytesLike,
    inputToken: string,
    inputAmount: BigNumberish,
    outputToken: BytesLike,
    outputAmount: BigNumberish,
    destinationChainId: BigNumberish,
    exclusiveRelayer: BytesLike,
    quoteTimestamp: BigNumberish,
    fillDeadline: BigNumberish,
    exclusivityParameter: BigNumberish,
    message: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositWithAuthorization(
    signatureOwner: string,
    depositData: SpokePoolPeripheryInterface.DepositDataStruct,
    validAfter: BigNumberish,
    validBefore: BigNumberish,
    receiveWithAuthSignature: BytesLike,
    depositDataSignature: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositWithPermit(
    signatureOwner: string,
    depositData: SpokePoolPeripheryInterface.DepositDataStruct,
    deadline: BigNumberish,
    permitSignature: BytesLike,
    depositDataSignature: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositWithPermit2(
    signatureOwner: string,
    depositData: SpokePoolPeripheryInterface.DepositDataStruct,
    permit: IPermit2.PermitTransferFromStruct,
    signature: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  eip712Domain(overrides?: CallOverrides): Promise<
    [string, string, string, BigNumber, string, string, BigNumber[]] & {
      fields: string;
      name: string;
      version: string;
      chainId: BigNumber;
      verifyingContract: string;
      salt: string;
      extensions: BigNumber[];
    }
  >;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  permit2(overrides?: CallOverrides): Promise<string>;

  permitNonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  swapAndBridge(
    swapAndDepositData: SpokePoolPeripheryInterface.SwapAndDepositDataStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapAndBridgeWithAuthorization(
    signatureOwner: string,
    swapAndDepositData: SpokePoolPeripheryInterface.SwapAndDepositDataStruct,
    validAfter: BigNumberish,
    validBefore: BigNumberish,
    receiveWithAuthSignature: BytesLike,
    swapAndDepositDataSignature: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapAndBridgeWithPermit(
    signatureOwner: string,
    swapAndDepositData: SpokePoolPeripheryInterface.SwapAndDepositDataStruct,
    deadline: BigNumberish,
    permitSignature: BytesLike,
    swapAndDepositDataSignature: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapAndBridgeWithPermit2(
    signatureOwner: string,
    swapAndDepositData: SpokePoolPeripheryInterface.SwapAndDepositDataStruct,
    permit: IPermit2.PermitTransferFromStruct,
    signature: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapProxy(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    depositNative(
      spokePool: string,
      recipient: BytesLike,
      inputToken: string,
      inputAmount: BigNumberish,
      outputToken: BytesLike,
      outputAmount: BigNumberish,
      destinationChainId: BigNumberish,
      exclusiveRelayer: BytesLike,
      quoteTimestamp: BigNumberish,
      fillDeadline: BigNumberish,
      exclusivityParameter: BigNumberish,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    depositWithAuthorization(
      signatureOwner: string,
      depositData: SpokePoolPeripheryInterface.DepositDataStruct,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      receiveWithAuthSignature: BytesLike,
      depositDataSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    depositWithPermit(
      signatureOwner: string,
      depositData: SpokePoolPeripheryInterface.DepositDataStruct,
      deadline: BigNumberish,
      permitSignature: BytesLike,
      depositDataSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    depositWithPermit2(
      signatureOwner: string,
      depositData: SpokePoolPeripheryInterface.DepositDataStruct,
      permit: IPermit2.PermitTransferFromStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    eip712Domain(overrides?: CallOverrides): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    permit2(overrides?: CallOverrides): Promise<string>;

    permitNonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    swapAndBridge(
      swapAndDepositData: SpokePoolPeripheryInterface.SwapAndDepositDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAndBridgeWithAuthorization(
      signatureOwner: string,
      swapAndDepositData: SpokePoolPeripheryInterface.SwapAndDepositDataStruct,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      receiveWithAuthSignature: BytesLike,
      swapAndDepositDataSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAndBridgeWithPermit(
      signatureOwner: string,
      swapAndDepositData: SpokePoolPeripheryInterface.SwapAndDepositDataStruct,
      deadline: BigNumberish,
      permitSignature: BytesLike,
      swapAndDepositDataSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAndBridgeWithPermit2(
      signatureOwner: string,
      swapAndDepositData: SpokePoolPeripheryInterface.SwapAndDepositDataStruct,
      permit: IPermit2.PermitTransferFromStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    swapProxy(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "EIP712DomainChanged()"(): EIP712DomainChangedEventFilter;
    EIP712DomainChanged(): EIP712DomainChangedEventFilter;

    "SwapBeforeBridge(address,bytes,address,address,uint256,uint256,bytes32,uint256)"(
      exchange?: null,
      exchangeCalldata?: null,
      swapToken?: string | null,
      acrossInputToken?: string | null,
      swapTokenAmount?: null,
      acrossInputAmount?: null,
      acrossOutputToken?: BytesLike | null,
      acrossOutputAmount?: null
    ): SwapBeforeBridgeEventFilter;
    SwapBeforeBridge(
      exchange?: null,
      exchangeCalldata?: null,
      swapToken?: string | null,
      acrossInputToken?: string | null,
      swapTokenAmount?: null,
      acrossInputAmount?: null,
      acrossOutputToken?: BytesLike | null,
      acrossOutputAmount?: null
    ): SwapBeforeBridgeEventFilter;
  };

  estimateGas: {
    depositNative(
      spokePool: string,
      recipient: BytesLike,
      inputToken: string,
      inputAmount: BigNumberish,
      outputToken: BytesLike,
      outputAmount: BigNumberish,
      destinationChainId: BigNumberish,
      exclusiveRelayer: BytesLike,
      quoteTimestamp: BigNumberish,
      fillDeadline: BigNumberish,
      exclusivityParameter: BigNumberish,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    depositWithAuthorization(
      signatureOwner: string,
      depositData: SpokePoolPeripheryInterface.DepositDataStruct,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      receiveWithAuthSignature: BytesLike,
      depositDataSignature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositWithPermit(
      signatureOwner: string,
      depositData: SpokePoolPeripheryInterface.DepositDataStruct,
      deadline: BigNumberish,
      permitSignature: BytesLike,
      depositDataSignature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositWithPermit2(
      signatureOwner: string,
      depositData: SpokePoolPeripheryInterface.DepositDataStruct,
      permit: IPermit2.PermitTransferFromStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    eip712Domain(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    permit2(overrides?: CallOverrides): Promise<BigNumber>;

    permitNonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    swapAndBridge(
      swapAndDepositData: SpokePoolPeripheryInterface.SwapAndDepositDataStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    swapAndBridgeWithAuthorization(
      signatureOwner: string,
      swapAndDepositData: SpokePoolPeripheryInterface.SwapAndDepositDataStruct,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      receiveWithAuthSignature: BytesLike,
      swapAndDepositDataSignature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swapAndBridgeWithPermit(
      signatureOwner: string,
      swapAndDepositData: SpokePoolPeripheryInterface.SwapAndDepositDataStruct,
      deadline: BigNumberish,
      permitSignature: BytesLike,
      swapAndDepositDataSignature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swapAndBridgeWithPermit2(
      signatureOwner: string,
      swapAndDepositData: SpokePoolPeripheryInterface.SwapAndDepositDataStruct,
      permit: IPermit2.PermitTransferFromStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swapProxy(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    depositNative(
      spokePool: string,
      recipient: BytesLike,
      inputToken: string,
      inputAmount: BigNumberish,
      outputToken: BytesLike,
      outputAmount: BigNumberish,
      destinationChainId: BigNumberish,
      exclusiveRelayer: BytesLike,
      quoteTimestamp: BigNumberish,
      fillDeadline: BigNumberish,
      exclusivityParameter: BigNumberish,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositWithAuthorization(
      signatureOwner: string,
      depositData: SpokePoolPeripheryInterface.DepositDataStruct,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      receiveWithAuthSignature: BytesLike,
      depositDataSignature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositWithPermit(
      signatureOwner: string,
      depositData: SpokePoolPeripheryInterface.DepositDataStruct,
      deadline: BigNumberish,
      permitSignature: BytesLike,
      depositDataSignature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositWithPermit2(
      signatureOwner: string,
      depositData: SpokePoolPeripheryInterface.DepositDataStruct,
      permit: IPermit2.PermitTransferFromStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eip712Domain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    permit2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permitNonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapAndBridge(
      swapAndDepositData: SpokePoolPeripheryInterface.SwapAndDepositDataStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapAndBridgeWithAuthorization(
      signatureOwner: string,
      swapAndDepositData: SpokePoolPeripheryInterface.SwapAndDepositDataStruct,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      receiveWithAuthSignature: BytesLike,
      swapAndDepositDataSignature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapAndBridgeWithPermit(
      signatureOwner: string,
      swapAndDepositData: SpokePoolPeripheryInterface.SwapAndDepositDataStruct,
      deadline: BigNumberish,
      permitSignature: BytesLike,
      swapAndDepositDataSignature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapAndBridgeWithPermit2(
      signatureOwner: string,
      swapAndDepositData: SpokePoolPeripheryInterface.SwapAndDepositDataStruct,
      permit: IPermit2.PermitTransferFromStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */

import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  UniversalSwapAndBridge,
  UniversalSwapAndBridgeInterface,
} from "../../SwapAndBridge.sol/UniversalSwapAndBridge";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract V3SpokePoolInterface",
        name: "_spokePool",
        type: "address",
      },
      {
        internalType: "contract WETH9Interface",
        name: "_wrappedNativeToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_exchange",
        type: "address",
      },
      {
        internalType: "bytes4[]",
        name: "_allowedSelectors",
        type: "bytes4[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InsufficientSwapValue",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidFunctionSelector",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSwapToken",
    type: "error",
  },
  {
    inputs: [],
    name: "LeftoverSrcTokens",
    type: "error",
  },
  {
    inputs: [],
    name: "MinimumExpectedInputAmount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "exchange",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "swapToken",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "acrossInputToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "swapTokenAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "acrossInputAmount",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "acrossOutputToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "acrossOutputAmount",
        type: "uint256",
      },
    ],
    name: "SwapBeforeBridge",
    type: "event",
  },
  {
    inputs: [],
    name: "EXCHANGE",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SPOKE_POOL",
    outputs: [
      {
        internalType: "contract V3SpokePoolInterface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    name: "allowedSelectors",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20Auth",
        name: "acrossInputToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "acrossInputAmount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "outputToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "outputAmount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "depositor",
            type: "address",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "destinationChainid",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "exclusiveRelayer",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "quoteTimestamp",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "fillDeadline",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "exclusivityDeadline",
            type: "uint32",
          },
          {
            internalType: "bytes",
            name: "message",
            type: "bytes",
          },
        ],
        internalType: "struct SwapAndBridgeBase.DepositData",
        name: "depositData",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "validAfter",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "validBefore",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "nonce",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "depositWithAuthorization",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20Permit",
        name: "acrossInputToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "acrossInputAmount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "outputToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "outputAmount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "depositor",
            type: "address",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "destinationChainid",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "exclusiveRelayer",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "quoteTimestamp",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "fillDeadline",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "exclusivityDeadline",
            type: "uint32",
          },
          {
            internalType: "bytes",
            name: "message",
            type: "bytes",
          },
        ],
        internalType: "struct SwapAndBridgeBase.DepositData",
        name: "depositData",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "depositWithPermit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "swapToken",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "acrossInputToken",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "routerCalldata",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "swapTokenAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minExpectedInputTokenAmount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "outputToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "outputAmount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "depositor",
            type: "address",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "destinationChainid",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "exclusiveRelayer",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "quoteTimestamp",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "fillDeadline",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "exclusivityDeadline",
            type: "uint32",
          },
          {
            internalType: "bytes",
            name: "message",
            type: "bytes",
          },
        ],
        internalType: "struct SwapAndBridgeBase.DepositData",
        name: "depositData",
        type: "tuple",
      },
    ],
    name: "swapAndBridge",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20Auth",
        name: "swapToken",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "acrossInputToken",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "routerCalldata",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "swapTokenAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minExpectedInputTokenAmount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "outputToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "outputAmount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "depositor",
            type: "address",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "destinationChainid",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "exclusiveRelayer",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "quoteTimestamp",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "fillDeadline",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "exclusivityDeadline",
            type: "uint32",
          },
          {
            internalType: "bytes",
            name: "message",
            type: "bytes",
          },
        ],
        internalType: "struct SwapAndBridgeBase.DepositData",
        name: "depositData",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "validAfter",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "validBefore",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "nonce",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "swapAndBridgeWithAuthorization",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20Permit",
        name: "swapToken",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "acrossInputToken",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "routerCalldata",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "swapTokenAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minExpectedInputTokenAmount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "outputToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "outputAmount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "depositor",
            type: "address",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "destinationChainid",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "exclusiveRelayer",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "quoteTimestamp",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "fillDeadline",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "exclusivityDeadline",
            type: "uint32",
          },
          {
            internalType: "bytes",
            name: "message",
            type: "bytes",
          },
        ],
        internalType: "struct SwapAndBridgeBase.DepositData",
        name: "depositData",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "swapAndBridgeWithPermit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x604060e060405234620001905762001b2390813803806200002081620001a8565b9384398201608083820312620001905782516001600160a01b03929091908383168303620001905760209485810151958587168703620001905760408201519586168603620001905760608201516001600160401b03928382116200019057019380601f860112156200019057845192831162000194576005948360051b908380620000ae818501620001a8565b80978152019282010192831162000190578301905b8282106200016e57505050600196879660ff19966001885f5416175f5560805260a05260c0525f955b62000132575b6040516119549081620001cf82396080518181816102fb0152611418015260a05181818161053d015281816111d20152611757015260c051816106c70152f35b8151861015620001685786809663ffffffff60e01b8382881b86010151165f52818352845f2082888254161790550195620000ec565b620000f2565b81516001600160e01b03198116810362000190578152908301908301620000c3565b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b6040519190601f01601f191682016001600160401b03811183821017620001945760405256fe60806040526004361015610011575f80fd5b5f3560e01c8063038f12ea146100a4578063277deffe1461009f5780638021fef71461009a57806385f168eb14610095578063ac9650d814610090578063b50e44b81461008b578063bdf52ad314610086578063c51e5eb9146100815763fdf152d31461007c575f80fd5b6107f6565b6105ee565b610561565b6104f3565b61046b565b61031f565b6102b1565b6101ff565b34610153576101807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610153576100dc610175565b6100e4610184565b67ffffffffffffffff919060443583811161015357610107903690600401610191565b9260a435948511610153576101236101519536906004016101bf565b9361012c6101ce565b9261016435956101443595610104359460e4359460c4359460843593606435936109d4565b005b5f80fd5b73ffffffffffffffffffffffffffffffffffffffff81160361015357565b6004359061018282610157565b565b6024359061018282610157565b9181601f840112156101535782359167ffffffffffffffff8311610153576020838186019501011161015357565b90816101409103126101535790565b610124359060ff8216820361015357565b60e4359060ff8216820361015357565b6084359060ff8216820361015357565b34610153576101407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101535760043561023b81610157565b610243610184565b67ffffffffffffffff919060443583811161015357610266903690600401610191565b919060a435948511610153576102836101519536906004016101bf565b61028b6101df565b926101243595610104359560c435946084359360643593610b86565b5f91031261015357565b34610153575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261015357602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b346101535760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610153576004357fffffffff000000000000000000000000000000000000000000000000000000008116809103610153575f526001602052602060ff60405f2054166040519015158152f35b5f5b8381106103a75750505f910152565b8181015183820152602001610398565b602080820190808352835180925260408301928160408460051b8301019501935f915b8483106103ea5750505050505090565b909192939495848080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc086600196030187527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8c5161045781518092818752878088019101610396565b0116010198019301930191949392906103da565b346101535760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101535767ffffffffffffffff6004358181116101535736602382011215610153578060040135918211610153573660248360051b83010111610153576104ef9160246104e39201610eab565b604051918291826103b7565b0390f35b34610153575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261015357602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b34610153576101207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101535760043561059d81610157565b60443567ffffffffffffffff8111610153576105bd9036906004016101bf565b9060c4359160ff831683036101535761015192610104359260e4359260a43591608435916064359160243590610f92565b60c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610153576004803561062581610157565b6024359061063282610157565b67ffffffffffffffff604435818111610153576106529036908601610191565b916064359060a4359081116101535761066e90369088016101bf565b92610677611089565b6106a27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff005f54165f55565b34156107e0578134036107b75773ffffffffffffffffffffffffffffffffffffffff807f000000000000000000000000000000000000000000000000000000000000000016809187160361078e57803b15610153575f90604051988980927fd0e30db000000000000000000000000000000000000000000000000000000000825234905af19687156107895761074297610770575b505b608435926110d9565b61015160017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff005f5416175f55565b8061077d61078392610b21565b806102a7565b5f610737565b610b7b565b876040517f3539a701000000000000000000000000000000000000000000000000000000008152fd5b866040517ff143e0da000000000000000000000000000000000000000000000000000000008152fd5b61074296506107f182303388611299565b610739565b346101535760e07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101535760043561083181610157565b60243560443567ffffffffffffffff8111610153576108549036906004016101bf565b9073ffffffffffffffffffffffffffffffffffffffff6108726101ef565b9361087b611089565b6108a67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff005f54165f55565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152911690602081604481855afa80156107895783915f916109a5575b5010610910575b610742935061090b82303384611299565b6113ff565b803b15610153576040517fd505accf00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101839052606480359082015260ff94909416608485015260a480359085015260c48035908501525f8460e48183855af19384156107895761074294610992575b506108fa565b8061077d61099f92610b21565b5f61098c565b6109c7915060203d6020116109cd575b6109bf8183610b3a565b810190610cfa565b5f6108f3565b503d6109b5565b73ffffffffffffffffffffffffffffffffffffffff909c9a919b94979295989396999c6109ff611089565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff005f54165f5516998a3b15610153576040517fef55bec6000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018990526064810193909352608483019390935260a482019b909b5260ff909a1660c48b015260e48a01919091526101048901525f8861012481838a5af197881561078957610ab798610ae5575b506110d9565b61018260017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff005f5416175f55565b610aee90610b21565b5f610ab1565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b67ffffffffffffffff8111610b3557604052565b610af4565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610b3557604052565b6040513d5f823e3d90fd5b73ffffffffffffffffffffffffffffffffffffffff909a9293949596979891999a610baf611089565b610bda7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff005f54165f55565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152911698906020816044818d5afa80156107895787915f91610cdb575b5010610c48575b505050610ab79750610c4383303389611299565b6110d9565b883b15610153576040517fd505accf00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101879052606481019190915260ff91909116608482015260a481019990995260c48901525f8860e481838a5af197881561078957610ab798610cc8575b8080610c2f565b8061077d610cd592610b21565b5f610cc1565b610cf4915060203d6020116109cd576109bf8183610b3a565b5f610c28565b90816020910312610153575190565b67ffffffffffffffff8111610b355760051b60200190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe181360301821215610153570180359067ffffffffffffffff82116101535760200191813603831361015357565b90821015610dba57610db69160051b810190610d4e565b9091565b610d21565b908092918237015f815290565b67ffffffffffffffff8111610b3557601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b3d15610e30573d90610e1782610dcc565b91610e256040519384610b3a565b82523d5f602084013e565b606090565b6020818303126101535780519067ffffffffffffffff8211610153570181601f82011215610153578051610e6881610dcc565b92610e766040519485610b3a565b8184526020828401011161015357610e949160208085019101610396565b90565b8051821015610dba5760209160051b010190565b919091610eb783610d09565b906040610ec76040519384610b3a565b8483527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610ef486610d09565b015f5b818110610f8157505082945f5b818110610f12575050505050565b5f80610f1f838588610d9f565b90610f2e875180938193610dbf565b0390305af4610f3b610e06565b9015610f615790600191610f4f8288610e97565b52610f5a8187610e97565b5001610f04565b604481511061015357806004610153920151602480918301019101610e35565b806060602080938801015201610ef7565b73ffffffffffffffffffffffffffffffffffffffff909895989794939297969196610fbb611089565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff005f54165f551694853b15610153576040517fef55bec6000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018890526064810193909352608483019390935260a482019790975260ff90961660c487015260e48601919091526101048501525f846101248183855af193841561078957610ab794611073575b506113ff565b61107c90610b21565b5f61106d565b1561015357565b60ff5f54161561015357565b7fffffffff0000000000000000000000000000000000000000000000000000000090358181169392600481106110ca57505050565b60040360031b82901b16169150565b9095949392919561112e61112a6111236110f38486611095565b7fffffffff00000000000000000000000000000000000000000000000000000000165f52600160205260405f2090565b5460ff1690565b1590565b61126f576040517f70a082310000000000000000000000000000000000000000000000000000000080825230600483015273ffffffffffffffffffffffffffffffffffffffff98919260209182856024818c8f165afa948515610789575f9561124e575b506040519081523060048201529982908b9060249082908d165afa948515610789576101829a89935f9761121e575b5050611219925f928380936111f8887f00000000000000000000000000000000000000000000000000000000000000008096611548565b61120760405180948193610dbf565b03925af1611213610e06565b50611082565b611668565b5f8094918194995061121996938161124192903d106109cd576109bf8183610b3a565b98935050928194506111c1565b8391955061126890823d84116109cd576109bf8183610b3a565b9490611192565b60046040517f42868c9b000000000000000000000000000000000000000000000000000000008152fd5b9290604051927f23b872dd00000000000000000000000000000000000000000000000000000000602085015273ffffffffffffffffffffffffffffffffffffffff809216602485015216604483015260648201526064815260a081019181831067ffffffffffffffff841117610b355761018292604052611841565b35610e9481610157565b3563ffffffff811681036101535790565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093818652868601375f8582860101520116010190565b98959094610e949d9b97926020956113f19a959c976101809d8d73ffffffffffffffffffffffffffffffffffffffff998a8096818096168452169101521660408d01521660608b015260808a015260a089015260c08801521660e086015263ffffffff8092166101008601521661012084015261014083019063ffffffff169052565b816101608201520191611330565b9073ffffffffffffffffffffffffffffffffffffffff807f00000000000000000000000000000000000000000000000000000000000000001692611444838583611548565b61145060408601611315565b9061145d60608701611315565b9361146787611315565b9661147460a08201611315565b61148060c0830161131f565b61148c60e0840161131f565b9161149a610100850161131f565b936114a9610120820182610d4e565b9790968c3b15610153576040519d8e809d819d7f7b939232000000000000000000000000000000000000000000000000000000008352608087013596602001359516916004019c6114f99d61136e565b03815a5f948591f180156107895761150e5750565b8061077d61018292610b21565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8316602482015291926020838060448101038173ffffffffffffffffffffffffffffffffffffffff86165afa928315610789575f9361163a575b508201809211611635576040517f095ea7b300000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff9390931660248401526044808401929092529082526101829190611630606483610b3a565b611841565b61151b565b61165491935060203d6020116109cd576109bf8183610b3a565b915f6115c3565b9190820391821161163557565b6040517f70a082310000000000000000000000000000000000000000000000000000000080825230600483015273ffffffffffffffffffffffffffffffffffffffff989697959695602095878b16959294939087826024818a5afa8015610789576116da925f91611824575b5061165b565b9788106117fa576040519384523060048501528916928581602481875afa8015610789578392611710925f926117db575061165b565b036117b157610182977f646284e396b68ff4b4f34e0aa97bcdb9c100f5b44a20da5c475f627039853841916117a96117478a611315565b918960405194859416988c0135917f0000000000000000000000000000000000000000000000000000000000000000859094939260609273ffffffffffffffffffffffffffffffffffffffff6080840197168352602083015260408201520152565b0390a46113ff565b60046040517fd6cf42f0000000000000000000000000000000000000000000000000000000008152fd5b6117f3919250883d8a116109cd576109bf8183610b3a565b905f6116d4565b60046040517f0492ff87000000000000000000000000000000000000000000000000000000008152fd5b61183b9150893d8b116109cd576109bf8183610b3a565b5f6116d4565b73ffffffffffffffffffffffffffffffffffffffff166040516040810181811067ffffffffffffffff821117610b35576118bc937f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460205f948594604052818152015260208151910182855af16118b6610e06565b916118f5565b80519081159182156118d2575b50501561015357565b819250906020918101031261015357602001518015158103610153575f806118c9565b901561190f57815115611906575090565b3b156101535790565b50805190811561015357602001fdfea264697066735822122066b7197a155308805fbedee5c26980493cce360e5c829be686db3534152c74bf64736f6c63430008170033";

type UniversalSwapAndBridgeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UniversalSwapAndBridgeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UniversalSwapAndBridge__factory extends ContractFactory {
  constructor(...args: UniversalSwapAndBridgeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _spokePool: string,
    _wrappedNativeToken: string,
    _exchange: string,
    _allowedSelectors: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<UniversalSwapAndBridge> {
    return super.deploy(
      _spokePool,
      _wrappedNativeToken,
      _exchange,
      _allowedSelectors,
      overrides || {}
    ) as Promise<UniversalSwapAndBridge>;
  }
  override getDeployTransaction(
    _spokePool: string,
    _wrappedNativeToken: string,
    _exchange: string,
    _allowedSelectors: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _spokePool,
      _wrappedNativeToken,
      _exchange,
      _allowedSelectors,
      overrides || {}
    );
  }
  override attach(address: string): UniversalSwapAndBridge {
    return super.attach(address) as UniversalSwapAndBridge;
  }
  override connect(signer: Signer): UniversalSwapAndBridge__factory {
    return super.connect(signer) as UniversalSwapAndBridge__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UniversalSwapAndBridgeInterface {
    return new utils.Interface(_abi) as UniversalSwapAndBridgeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UniversalSwapAndBridge {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as UniversalSwapAndBridge;
  }
}

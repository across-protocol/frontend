/* Autogenerated file. Do not edit manually. */
/* tslint:disable */

import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SwapAndBridge,
  SwapAndBridgeInterface,
} from "../../SwapAndBridge.sol/SwapAndBridge";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract V3SpokePoolInterface",
        name: "_spokePool",
        type: "address",
      },
      {
        internalType: "contract WETH9Interface",
        name: "_wrappedNativeToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_exchange",
        type: "address",
      },
      {
        internalType: "bytes4[]",
        name: "_allowedSelectors",
        type: "bytes4[]",
      },
      {
        internalType: "contract IERC20",
        name: "_swapToken",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "_acrossInputToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidFunctionSelector",
    type: "error",
  },
  {
    inputs: [],
    name: "LeftoverSrcTokens",
    type: "error",
  },
  {
    inputs: [],
    name: "MinimumExpectedInputAmount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "exchange",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "swapToken",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "acrossInputToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "swapTokenAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "acrossInputAmount",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "acrossOutputToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "acrossOutputAmount",
        type: "uint256",
      },
    ],
    name: "SwapBeforeBridge",
    type: "event",
  },
  {
    inputs: [],
    name: "ACROSS_INPUT_TOKEN",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "EXCHANGE",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SPOKE_POOL",
    outputs: [
      {
        internalType: "contract V3SpokePoolInterface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SWAP_TOKEN",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    name: "allowedSelectors",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "routerCalldata",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "swapTokenAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minExpectedInputTokenAmount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "outputToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "outputAmount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "depositor",
            type: "address",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "destinationChainid",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "exclusiveRelayer",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "quoteTimestamp",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "fillDeadline",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "exclusivityDeadline",
            type: "uint32",
          },
          {
            internalType: "bytes",
            name: "message",
            type: "bytes",
          },
        ],
        internalType: "struct SwapAndBridgeBase.DepositData",
        name: "depositData",
        type: "tuple",
      },
    ],
    name: "swapAndBridge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x604061012060405234620001d2576200133d803803806200002081620001ea565b92833981019160c082840312620001d25781516001600160a01b03908181168103620001d25760209283850151938385168503620001d25760408601519384168403620001d25760608601516001600160401b039790888111620001d25787019080601f83011215620001d2578151988911620001d6576005918960051b908480620000ae818501620001ea565b809d81520192820101928311620001d2578401905b828210620001b057505050620000ea60a0620000e260808a0162000210565b980162000210565b97600196879660ff19966001885f5416175f5560805260a05260c0525f955b62000174575b888860e05261010090815260405161111791826200022683396080518281816101da0152610faf015260a05182818161041c015281816109600152610d18015260c05182505060e05182818160c9015261082c01525181818161016c015261084e0152f35b8051861015620001aa5786809663ffffffff60e01b8582861b85010151165f52818552855f208288825416179055019562000109565b6200010f565b81516001600160e01b031981168103620001d2578152908401908401620000c3565b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b6040519190601f01601f191682016001600160401b03811183821017620001d657604052565b51906001600160a01b0382168203620001d25756fe60806040526004361015610011575f80fd5b5f3560e01c8063393bb94314610084578063652fa4b91461007f5780638021fef71461007a57806385f168eb14610075578063ac9650d814610070578063b50e44b81461006b5763e65ae3ae14610066575f80fd5b61044f565b6103d2565b61034a565b6101fe565b610190565b610122565b34610114575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101145773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166080527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8060a0016080f35b5f80fd5b5f91031261011457565b34610114575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011457602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b34610114575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011457602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b346101145760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610114576004357fffffffff000000000000000000000000000000000000000000000000000000008116809103610114575f526001602052602060ff60405f2054166040519015158152f35b5f5b8381106102865750505f910152565b8181015183820152602001610277565b602080820190808352835180925260408301928160408460051b8301019501935f915b8483106102c95750505050505090565b909192939495848080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc086600196030187527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8c5161033681518092818752878088019101610275565b0116010198019301930191949392906102b9565b346101145760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101145767ffffffffffffffff6004358181116101145736602382011215610114578060040135918211610114573660248360051b83010111610114576103ce9160246103c2920161070a565b60405191829182610296565b0390f35b34610114575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011457602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b90816101409103126101145790565b346101145760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101145767ffffffffffffffff600435818111610114573660238201121561011457806004013582811161011457366024828401011161011457606435928311610114576104cf6104df933690600401610440565b91604435916024803592016107f1565b005b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b67ffffffffffffffff811161052257604052565b6104e1565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761052257604052565b67ffffffffffffffff81116105225760051b60200190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe181360301821215610114570180359067ffffffffffffffff82116101145760200191813603831361011457565b90821015610619576106159160051b8101906105ad565b9091565b610580565b908092918237015f815290565b67ffffffffffffffff811161052257601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b3d1561068f573d906106768261062b565b916106846040519384610527565b82523d5f602084013e565b606090565b6020818303126101145780519067ffffffffffffffff8211610114570181601f820112156101145780516106c78161062b565b926106d56040519485610527565b81845260208284010111610114576106f39160208085019101610275565b90565b80518210156106195760209160051b010190565b91909161071683610568565b9060406107266040519384610527565b8483527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061075386610568565b015f5b8181106107e057505082945f5b818110610771575050505050565b5f8061077e8385886105fe565b9061078d87518093819361061e565b0390305af461079a610665565b90156107c057906001916107ae82886106f6565b526107b981876106f6565b5001610763565b604481511061011457806004610114920151602480918301019101610694565b806060602080938801015201610756565b9193909260ff5f5416156101145761082a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff005f54165f55565b7f0000000000000000000000000000000000000000000000000000000000000000927f0000000000000000000000000000000000000000000000000000000000000000946108bc6108b86108b16108818486610a73565b7fffffffff00000000000000000000000000000000000000000000000000000000165f52600160205260405f2090565b5460ff1690565b1590565b610a42576040517f70a082310000000000000000000000000000000000000000000000000000000080825230600483015273ffffffffffffffffffffffffffffffffffffffff98919260209182856024818c8f165afa948515610a1c575f95610a21575b506040519081523060048201529982908b9060249082908d165afa948515610a1c576109ac9a89935f976109dc575b50506109a7925f92838093610986887f00000000000000000000000000000000000000000000000000000000000000008096610afe565b6109956040518094819361061e565b03925af16109a1610665565b50610a6c565b610c29565b6109da60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff005f5416175f55565b565b5f809491819499506109a7969381610a0892903d10610a15575b610a008183610527565b810190610ab7565b989350509281945061094f565b503d6109f6565b610ac6565b83919550610a3b90823d8411610a1557610a008183610527565b9490610920565b60046040517f42868c9b000000000000000000000000000000000000000000000000000000008152fd5b1561011457565b7fffffffff000000000000000000000000000000000000000000000000000000009035818116939260048110610aa857505050565b60040360031b82901b16169150565b90816020910312610114575190565b6040513d5f823e3d90fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b60449192602073ffffffffffffffffffffffffffffffffffffffff604051948580927fdd62ed3e000000000000000000000000000000000000000000000000000000008252306004830152808916602483015286165afa928315610a1c575f93610bda575b508201809211610bd5576040517f095ea7b300000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff9390931660248401526044808401929092529082526109da9190610bd0606483610527565b610e02565b610ad1565b610bf491935060203d602011610a1557610a008183610527565b915f610b63565b91908203918211610bd557565b3573ffffffffffffffffffffffffffffffffffffffff811681036101145790565b6040517f70a082310000000000000000000000000000000000000000000000000000000080825230600483015273ffffffffffffffffffffffffffffffffffffffff989697959695602095878b16959294939087826024818a5afa8015610a1c57610c9b925f91610de5575b50610bfb565b978810610dbb576040519384523060048501528916928581602481875afa8015610a1c578392610cd1925f92610d9c5750610bfb565b03610d72576109da977f646284e396b68ff4b4f34e0aa97bcdb9c100f5b44a20da5c475f62703985384191610d6a610d088a610c08565b918960405194859416988c0135917f0000000000000000000000000000000000000000000000000000000000000000859094939260609273ffffffffffffffffffffffffffffffffffffffff6080840197168352602083015260408201520152565b0390a4610f96565b60046040517fd6cf42f0000000000000000000000000000000000000000000000000000000008152fd5b610db4919250883d8a11610a1557610a008183610527565b905f610c95565b60046040517f0492ff87000000000000000000000000000000000000000000000000000000008152fd5b610dfc9150893d8b11610a1557610a008183610527565b5f610c95565b73ffffffffffffffffffffffffffffffffffffffff166040516040810181811067ffffffffffffffff82111761052257610e7d937f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460205f948594604052818152015260208151910182855af1610e77610665565b916110b8565b8051908115918215610e93575b50501561011457565b819250906020918101031261011457602001518015158103610114575f80610e8a565b3563ffffffff811681036101145790565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093818652868601375f8582860101520116010190565b989590946106f39d9b9792602095610f889a959c976101809d8d73ffffffffffffffffffffffffffffffffffffffff998a8096818096168452169101521660408d01521660608b015260808a015260a089015260c08801521660e086015263ffffffff8092166101008601521661012084015261014083019063ffffffff169052565b816101608201520191610ec7565b9073ffffffffffffffffffffffffffffffffffffffff807f00000000000000000000000000000000000000000000000000000000000000001692610fdb838583610afe565b610fe760408601610c08565b90610ff460608701610c08565b93610ffe87610c08565b9661100b60a08201610c08565b61101760c08301610eb6565b61102360e08401610eb6565b916110316101008501610eb6565b936110406101208201826105ad565b9790968c3b15610114576040519d8e809d819d7f7b939232000000000000000000000000000000000000000000000000000000008352608087013596602001359516916004019c6110909d610f05565b03815a5f948591f18015610a1c576110a55750565b806110b26109da9261050e565b80610118565b90156110d2578151156110c9575090565b3b156101145790565b50805190811561011457602001fdfea2646970667358221220026a7409d965bcdd82516120169821b365afc3acc0d52608453d28ca5160c46464736f6c63430008170033";

type SwapAndBridgeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapAndBridgeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapAndBridge__factory extends ContractFactory {
  constructor(...args: SwapAndBridgeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _spokePool: string,
    _wrappedNativeToken: string,
    _exchange: string,
    _allowedSelectors: BytesLike[],
    _swapToken: string,
    _acrossInputToken: string,
    overrides?: Overrides & { from?: string }
  ): Promise<SwapAndBridge> {
    return super.deploy(
      _spokePool,
      _wrappedNativeToken,
      _exchange,
      _allowedSelectors,
      _swapToken,
      _acrossInputToken,
      overrides || {}
    ) as Promise<SwapAndBridge>;
  }
  override getDeployTransaction(
    _spokePool: string,
    _wrappedNativeToken: string,
    _exchange: string,
    _allowedSelectors: BytesLike[],
    _swapToken: string,
    _acrossInputToken: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _spokePool,
      _wrappedNativeToken,
      _exchange,
      _allowedSelectors,
      _swapToken,
      _acrossInputToken,
      overrides || {}
    );
  }
  override attach(address: string): SwapAndBridge {
    return super.attach(address) as SwapAndBridge;
  }
  override connect(signer: Signer): SwapAndBridge__factory {
    return super.connect(signer) as SwapAndBridge__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapAndBridgeInterface {
    return new utils.Interface(_abi) as SwapAndBridgeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapAndBridge {
    return new Contract(address, _abi, signerOrProvider) as SwapAndBridge;
  }
}

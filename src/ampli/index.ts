/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Ampli - A strong typed wrapper for your Analytics
 *
 * This file is generated by Amplitude.
 * To update run 'ampli pull web'
 *
 * Required dependencies: @amplitude/analytics-browser@^1.3.0
 * Tracking Plan Version: 50
 * Build: 1.0.0
 * Runtime: browser:typescript-ampli-v2
 *
 * [View Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest)
 *
 * [Full Setup Instructions](https://data.amplitude.com/risklabs/Risk%20Labs/implementation/web)
 */

import * as amplitude from "@amplitude/analytics-browser";

export type Environment = "production" | "development" | "testing";

export const ApiKey: Record<Environment, string> = {
  production: "",
  development: "",
  testing: "",
};

/**
 * Default Amplitude configuration options. Contains tracking plan information.
 */
export const DefaultConfiguration: BrowserOptions = {
  plan: {
    version: "50",
    branch: "main",
    source: "web",
    versionId: "5b6bde07-5ed3-4021-967f-fdaec4b35a87",
  },
  ...{
    ingestionMetadata: {
      sourceName: "browser-typescript-ampli",
      sourceVersion: "2.0.0",
    },
  },
};

export interface LoadOptionsBase {
  disabled?: boolean;
}

export type LoadOptionsWithEnvironment = LoadOptionsBase & {
  environment: Environment;
  client?: { configuration?: BrowserOptions };
};
export type LoadOptionsWithApiKey = LoadOptionsBase & {
  client: { apiKey: string; configuration?: BrowserOptions };
};
export type LoadOptionsWithClientInstance = LoadOptionsBase & {
  client: { instance: BrowserClient };
};

export type LoadOptions =
  | LoadOptionsWithEnvironment
  | LoadOptionsWithApiKey
  | LoadOptionsWithClientInstance;

export interface IdentifyProperties {
  AcxVolumeNative?: any;
  AcxVolumeUsd?: any;
  AllAssetsAllNetworksWalletCurrentBalanceUsd?: string;
  /**
   * List of wallet addresses connected during Wallet Connect Transaction Completed event.
   *
   * | Rule | Value |
   * |---|---|
   * | Unique Items | true |
   * | Item Type | string |
   */
  AllWalletAddressesConnected?: string[];
  /**
   * Chain ids of wallet addresses connected
   *
   * | Rule | Value |
   * |---|---|
   * | Unique Items | true |
   * | Item Type | string |
   */
  AllWalletChainIds?: string[];
  ArbitrumAcxWalletCurrentBalance?: any;
  ArbitrumBalWalletCurrentBalance?: any;
  ArbitrumDaiWalletCurrentBalance?: any;
  ArbitrumEthWalletCurrentBalance?: any;
  ArbitrumUmaWalletCurrentBalance?: any;
  ArbitrumUsdcWalletCurrentBalance?: any;
  ArbitrumWbtcWalletCurrentBalance?: any;
  ArbitrumWethWalletCurrentBalance?: any;
  BalVolumeNative?: any;
  BalVolumeUsd?: any;
  BobaAcxWalletCurrentBalance?: any;
  BobaBobaWalletCurrentBalance?: any;
  BobaDaiWalletCurrentBalance?: any;
  BobaEthWalletCurrentBalance?: any;
  BobaUmaWalletCurrentBalance?: any;
  BobaUsdcWalletCurrentBalance?: any;
  BobaVolumeNative?: any;
  BobaVolumeUsd?: any;
  BobaWbtcWalletCurrentBalance?: any;
  BobaWethWalletCurrentBalance?: any;
  DaiVolumeNative?: any;
  DaiVolumeUsd?: any;
  EthereumAcxWalletCurrentBalance?: any;
  EthereumBalWalletCurrentBalance?: any;
  EthereumBobaWalletCurrentBalance?: any;
  EthereumDaiWalletCurrentBalance?: any;
  EthereumEthWalletCurrentBalance?: any;
  EthereumUmaWalletCurrentBalance?: any;
  EthereumUsdcWalletCurrentBalance?: any;
  EthereumWbtcWalletCurrentBalance?: any;
  EthereumWethWalletCurrentBalance?: any;
  EthVolumeNative?: any;
  EthVolumeUsd?: any;
  initial_dclid?: any;
  initial_fbclid?: any;
  initial_gbraid?: any;
  initial_gclid?: any;
  initial_ko_click_id?: any;
  initial_msclkid?: any;
  initial_referrer?: any;
  initial_referring_domain?: any;
  initial_ttclid?: any;
  initial_twclid?: any;
  initial_utm_campaign?: any;
  initial_utm_content?: any;
  initial_utm_id?: any;
  initial_utm_medium?: any;
  initial_utm_source?: any;
  initial_utm_term?: any;
  initial_wbraid?: any;
  L1L2Transfers?: any;
  L2L1Transfers?: any;
  L2L2Transfers?: any;
  OptimismAcxWalletCurrentBalance?: any;
  OptimismBalWalletCurrentBalance?: any;
  OptimismDaiWalletCurrentBalance?: any;
  OptimismEthWalletCurrentBalance?: any;
  OptimismUmaWalletCurrentBalance?: any;
  OptimismUsdcWalletCurrentBalance?: any;
  OptimismWbtcWalletCurrentBalance?: any;
  OptimismWethWalletCurrentBalance?: any;
  PolygonAcxWalletCurrentBalance?: any;
  PolygonBalWalletCurrentBalance?: any;
  PolygonDaiWalletCurrentBalance?: any;
  PolygonUmaWalletCurrentBalance?: any;
  PolygonUsdcWalletCurrentBalance?: any;
  PolygonWbtcWalletCurrentBalance?: any;
  PolygonWethWalletCurrentBalance?: any;
  referrer?: any;
  referring_domain?: any;
  TotalTransfers?: any;
  TotalVolumeUsd?: any;
  UmaVolumeNative?: any;
  UmaVolumeUsd?: any;
  UsdcVolumeNative?: any;
  UsdcVolumeUsd?: any;
  /**
   * Currently connected wallet address
   */
  WalletAddress?: string;
  /**
   * Type of wallet connected
   */
  WalletType?: string;
  WbtcVolumeNative?: any;
  WbtcVolumeUsd?: any;
  WethVolumeNative?: any;
  WethVolumeUsd?: any;
}

export interface ConnectWalletButtonClickedProperties {
  /**
   * Action user did to trigger the event.
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | onClick, onKeyPress |
   */
  action: "onClick" | "onKeyPress";
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | connectWalletButton, web3OnboardModal, maxButton, quickSwapButton, trackInExplorerLink, monitorDepositProgressLink, earnByAddingLiquidityAndStakingLink, disconnectWalletButton |
   */
  element:
    | "connectWalletButton"
    | "web3OnboardModal"
    | "maxButton"
    | "quickSwapButton"
    | "trackInExplorerLink"
    | "monitorDepositProgressLink"
    | "earnByAddingLiquidityAndStakingLink"
    | "disconnectWalletButton";
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | splashPage, bridgePage, poolPage, rewardsPage, transactionsPage, stakingPage, referralPage, airdropPage, 404Page, marketingHomePage, marketingBridgePage, marketingAcrossPlusPage, marketingSettlementPage, depositStatusPage |
   */
  page:
    | "splashPage"
    | "bridgePage"
    | "poolPage"
    | "rewardsPage"
    | "transactionsPage"
    | "stakingPage"
    | "referralPage"
    | "airdropPage"
    | "404Page"
    | "marketingHomePage"
    | "marketingBridgePage"
    | "marketingAcrossPlusPage"
    | "marketingSettlementPage"
    | "depositStatusPage";
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | navbar, mobileNavSidebar, addLiquidityForm, removeLiquidityForm, airdropSplashFlow, referralTable, rewardsTable, unstakeForm, myTransactionsTable, bridgeForm, claimReferralRewardsForm, stakeForm, depositConfirmation |
   */
  section:
    | "navbar"
    | "mobileNavSidebar"
    | "addLiquidityForm"
    | "removeLiquidityForm"
    | "airdropSplashFlow"
    | "referralTable"
    | "rewardsTable"
    | "unstakeForm"
    | "myTransactionsTable"
    | "bridgeForm"
    | "claimReferralRewardsForm"
    | "stakeForm"
    | "depositConfirmation";
}

export interface DepositNetworkMismatchProperties {
  /**
   * Id of the fromChain
   */
  fromChainId: string;
  signerAddress: string;
  signerChainId: string;
  /**
   * Id of the toChain
   */
  toChainId: string;
}

export interface DisconnectWalletButtonClickedProperties {
  /**
   * Action user did to trigger the event.
   */
  action: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | connectWalletButton, web3OnboardModal, maxButton, quickSwapButton, trackInExplorerLink, monitorDepositProgressLink, earnByAddingLiquidityAndStakingLink, disconnectWalletButton |
   */
  element:
    | "connectWalletButton"
    | "web3OnboardModal"
    | "maxButton"
    | "quickSwapButton"
    | "trackInExplorerLink"
    | "monitorDepositProgressLink"
    | "earnByAddingLiquidityAndStakingLink"
    | "disconnectWalletButton";
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | splashPage, bridgePage, poolPage, rewardsPage, transactionsPage, stakingPage, referralPage, airdropPage, 404Page, marketingHomePage, marketingBridgePage, marketingAcrossPlusPage, marketingSettlementPage, depositStatusPage |
   */
  page:
    | "splashPage"
    | "bridgePage"
    | "poolPage"
    | "rewardsPage"
    | "transactionsPage"
    | "stakingPage"
    | "referralPage"
    | "airdropPage"
    | "404Page"
    | "marketingHomePage"
    | "marketingBridgePage"
    | "marketingAcrossPlusPage"
    | "marketingSettlementPage"
    | "depositStatusPage";
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | navbar, mobileNavSidebar, addLiquidityForm, removeLiquidityForm, airdropSplashFlow, referralTable, rewardsTable, unstakeForm, myTransactionsTable, bridgeForm, claimReferralRewardsForm, stakeForm, depositConfirmation |
   */
  section:
    | "navbar"
    | "mobileNavSidebar"
    | "addLiquidityForm"
    | "removeLiquidityForm"
    | "airdropSplashFlow"
    | "referralTable"
    | "rewardsTable"
    | "unstakeForm"
    | "myTransactionsTable"
    | "bridgeForm"
    | "claimReferralRewardsForm"
    | "stakeForm"
    | "depositConfirmation";
}

export interface EarnByAddingLiquidityClickedProperties {
  /**
   * Action user did to trigger the event.
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | onClick, onKeyPress |
   */
  action: "onClick" | "onKeyPress";
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | connectWalletButton, web3OnboardModal, maxButton, quickSwapButton, trackInExplorerLink, monitorDepositProgressLink, earnByAddingLiquidityAndStakingLink, disconnectWalletButton |
   */
  element:
    | "connectWalletButton"
    | "web3OnboardModal"
    | "maxButton"
    | "quickSwapButton"
    | "trackInExplorerLink"
    | "monitorDepositProgressLink"
    | "earnByAddingLiquidityAndStakingLink"
    | "disconnectWalletButton";
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | splashPage, bridgePage, poolPage, rewardsPage, transactionsPage, stakingPage, referralPage, airdropPage, 404Page, marketingHomePage, marketingBridgePage, marketingAcrossPlusPage, marketingSettlementPage, depositStatusPage |
   */
  page:
    | "splashPage"
    | "bridgePage"
    | "poolPage"
    | "rewardsPage"
    | "transactionsPage"
    | "stakingPage"
    | "referralPage"
    | "airdropPage"
    | "404Page"
    | "marketingHomePage"
    | "marketingBridgePage"
    | "marketingAcrossPlusPage"
    | "marketingSettlementPage"
    | "depositStatusPage";
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | navbar, mobileNavSidebar, addLiquidityForm, removeLiquidityForm, airdropSplashFlow, referralTable, rewardsTable, unstakeForm, myTransactionsTable, bridgeForm, claimReferralRewardsForm, stakeForm, depositConfirmation |
   */
  section:
    | "navbar"
    | "mobileNavSidebar"
    | "addLiquidityForm"
    | "removeLiquidityForm"
    | "airdropSplashFlow"
    | "referralTable"
    | "rewardsTable"
    | "unstakeForm"
    | "myTransactionsTable"
    | "bridgeForm"
    | "claimReferralRewardsForm"
    | "stakeForm"
    | "depositConfirmation";
}

export interface FromChainSelectedProperties {
  /**
   * Name of the fromChain
   */
  chainName: string;
  /**
   * Whether or not this event is the default value loaded when an event is rendered.
   */
  default?: boolean;
  /**
   * Id of the fromChain
   */
  fromChainId: string;
}

export interface MaxTokenAmountClickedProperties {
  /**
   * Action user did to trigger the event.
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | onClick, onKeyPress |
   */
  action: "onClick" | "onKeyPress";
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | connectWalletButton, web3OnboardModal, maxButton, quickSwapButton, trackInExplorerLink, monitorDepositProgressLink, earnByAddingLiquidityAndStakingLink, disconnectWalletButton |
   */
  element:
    | "connectWalletButton"
    | "web3OnboardModal"
    | "maxButton"
    | "quickSwapButton"
    | "trackInExplorerLink"
    | "monitorDepositProgressLink"
    | "earnByAddingLiquidityAndStakingLink"
    | "disconnectWalletButton";
  page: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | navbar, mobileNavSidebar, addLiquidityForm, removeLiquidityForm, airdropSplashFlow, referralTable, rewardsTable, unstakeForm, myTransactionsTable, bridgeForm, claimReferralRewardsForm, stakeForm, depositConfirmation |
   */
  section:
    | "navbar"
    | "mobileNavSidebar"
    | "addLiquidityForm"
    | "removeLiquidityForm"
    | "airdropSplashFlow"
    | "referralTable"
    | "rewardsTable"
    | "unstakeForm"
    | "myTransactionsTable"
    | "bridgeForm"
    | "claimReferralRewardsForm"
    | "stakeForm"
    | "depositConfirmation";
}

export interface MonitorDepositProgressClickedProperties {
  /**
   * Action user did to trigger the event.
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | onClick, onKeyPress |
   */
  action: "onClick" | "onKeyPress";
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | connectWalletButton, web3OnboardModal, maxButton, quickSwapButton, trackInExplorerLink, monitorDepositProgressLink, earnByAddingLiquidityAndStakingLink, disconnectWalletButton |
   */
  element:
    | "connectWalletButton"
    | "web3OnboardModal"
    | "maxButton"
    | "quickSwapButton"
    | "trackInExplorerLink"
    | "monitorDepositProgressLink"
    | "earnByAddingLiquidityAndStakingLink"
    | "disconnectWalletButton";
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | splashPage, bridgePage, poolPage, rewardsPage, transactionsPage, stakingPage, referralPage, airdropPage, 404Page |
   */
  page:
    | "splashPage"
    | "bridgePage"
    | "poolPage"
    | "rewardsPage"
    | "transactionsPage"
    | "stakingPage"
    | "referralPage"
    | "airdropPage"
    | "404Page";
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | navbar, mobileNavSidebar, addLiquidityForm, removeLiquidityForm, airdropSplashFlow, referralTable, rewardsTable, unstakeForm, myTransactionsTable, bridgeForm, claimReferralRewardsForm, stakeForm, depositConfirmation |
   */
  section:
    | "navbar"
    | "mobileNavSidebar"
    | "addLiquidityForm"
    | "removeLiquidityForm"
    | "airdropSplashFlow"
    | "referralTable"
    | "rewardsTable"
    | "unstakeForm"
    | "myTransactionsTable"
    | "bridgeForm"
    | "claimReferralRewardsForm"
    | "stakeForm"
    | "depositConfirmation";
}

export interface PageViewedProperties {
  /**
   * Hash to identify the UI version when event was triggered
   */
  gitCommitHash: string;
  /**
   * Boolean if this is first time identifed user has visited page. Should be Null for anonymous users.
   */
  isInitialPageView: boolean;
  origin: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | splashPage, bridgePage, poolPage, rewardsPage, transactionsPage, stakingPage, referralPage, airdropPage, 404Page, marketingHomePage, marketingBridgePage, marketingAcrossPlusPage, marketingSettlementPage, depositStatusPage |
   */
  page:
    | "splashPage"
    | "bridgePage"
    | "poolPage"
    | "rewardsPage"
    | "transactionsPage"
    | "stakingPage"
    | "referralPage"
    | "airdropPage"
    | "404Page"
    | "marketingHomePage"
    | "marketingBridgePage"
    | "marketingAcrossPlusPage"
    | "marketingSettlementPage"
    | "depositStatusPage";
  path: string;
  /**
   * Address of referee, null if no referral used
   */
  referralProgramAddress?: string;
  /**
   * Referring url
   */
  referrer?: string;
}

export interface QuickSwapButtonClickedProperties {
  /**
   * Action user did to trigger the event.
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | onClick, onKeyPress |
   */
  action: "onClick" | "onKeyPress";
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | connectWalletButton, web3OnboardModal, maxButton, quickSwapButton, trackInExplorerLink, monitorDepositProgressLink, earnByAddingLiquidityAndStakingLink, disconnectWalletButton |
   */
  element:
    | "connectWalletButton"
    | "web3OnboardModal"
    | "maxButton"
    | "quickSwapButton"
    | "trackInExplorerLink"
    | "monitorDepositProgressLink"
    | "earnByAddingLiquidityAndStakingLink"
    | "disconnectWalletButton";
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | splashPage, bridgePage, poolPage, rewardsPage, transactionsPage, stakingPage, referralPage, airdropPage, 404Page, marketingHomePage, marketingBridgePage, marketingAcrossPlusPage, marketingSettlementPage, depositStatusPage |
   */
  page:
    | "splashPage"
    | "bridgePage"
    | "poolPage"
    | "rewardsPage"
    | "transactionsPage"
    | "stakingPage"
    | "referralPage"
    | "airdropPage"
    | "404Page"
    | "marketingHomePage"
    | "marketingBridgePage"
    | "marketingAcrossPlusPage"
    | "marketingSettlementPage"
    | "depositStatusPage";
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | navbar, mobileNavSidebar, addLiquidityForm, removeLiquidityForm, airdropSplashFlow, referralTable, rewardsTable, unstakeForm, myTransactionsTable, bridgeForm, claimReferralRewardsForm, stakeForm, depositConfirmation |
   */
  section:
    | "navbar"
    | "mobileNavSidebar"
    | "addLiquidityForm"
    | "removeLiquidityForm"
    | "airdropSplashFlow"
    | "referralTable"
    | "rewardsTable"
    | "unstakeForm"
    | "myTransactionsTable"
    | "bridgeForm"
    | "claimReferralRewardsForm"
    | "stakeForm"
    | "depositConfirmation";
}

export interface ToAccountChangedProperties {
  /**
   * Recipient wallet address
   */
  toWalletAddress: string;
}

export interface ToChainSelectedProperties {
  /**
   * Name of the toChain
   */
  chainName: string;
  /**
   * Whether or not this event is the default value loaded when an event is rendered.
   */
  default?: boolean;
  /**
   * Id of the toChain
   */
  toChainId: string;
}

export interface TokenSelectedProperties {
  /**
   * Whether or not this event is the default value loaded when an event is rendered.
   */
  default?: boolean;
  /**
   * Position of the asset in the list
   */
  tokenListIndex: string;
  /**
   * Length of the asset list
   */
  tokenListLength: string;
  /**
   * Symbol of bridge token
   */
  tokenSymbol: string;
}

export interface TrackInExplorerClickedProperties {
  /**
   * Action user did to trigger the event.
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | onClick, onKeyPress |
   */
  action: "onClick" | "onKeyPress";
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | connectWalletButton, web3OnboardModal, maxButton, quickSwapButton, trackInExplorerLink, monitorDepositProgressLink, earnByAddingLiquidityAndStakingLink, disconnectWalletButton |
   */
  element:
    | "connectWalletButton"
    | "web3OnboardModal"
    | "maxButton"
    | "quickSwapButton"
    | "trackInExplorerLink"
    | "monitorDepositProgressLink"
    | "earnByAddingLiquidityAndStakingLink"
    | "disconnectWalletButton";
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | splashPage, bridgePage, poolPage, rewardsPage, transactionsPage, stakingPage, referralPage, airdropPage, 404Page |
   */
  page:
    | "splashPage"
    | "bridgePage"
    | "poolPage"
    | "rewardsPage"
    | "transactionsPage"
    | "stakingPage"
    | "referralPage"
    | "airdropPage"
    | "404Page";
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | navbar, mobileNavSidebar, addLiquidityForm, removeLiquidityForm, airdropSplashFlow, referralTable, rewardsTable, unstakeForm, myTransactionsTable, bridgeForm, claimReferralRewardsForm, stakeForm, depositConfirmation |
   */
  section:
    | "navbar"
    | "mobileNavSidebar"
    | "addLiquidityForm"
    | "removeLiquidityForm"
    | "airdropSplashFlow"
    | "referralTable"
    | "rewardsTable"
    | "unstakeForm"
    | "myTransactionsTable"
    | "bridgeForm"
    | "claimReferralRewardsForm"
    | "stakeForm"
    | "depositConfirmation";
}

export interface TransferDepositCompletedProperties {
  /**
   * Capital fee percent, in decimals
   */
  capitalFeePct: string;
  /**
   * Capital fee in the bridge token, in decimals
   */
  capitalFeeTotal: string;
  /**
   * Capital fee in USD
   */
  capitalFeeTotalUsd: string;
  depositCompleteTimestamp: string;
  /**
   * Expected fill time in minutes, as displayed in the UI for the asset and route selected
   */
  expectedFillTimeInMinutes: string;
  /**
   * The lower bound of the expected fill time in minutes, as displayed in the UI for the asset and route selected.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  expectedFillTimeInMinutesLowerBound?: number;
  /**
   * The upper bound of the expected fill time in minutes, as displayed in the UI for the asset and route selected.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  expectedFillTimeInMinutesUpperBound?: number;
  /**
   * From amount in the bridge token, in decimals
   */
  fromAmount: string;
  /**
   * From amount in USD
   */
  fromAmountUsd: string;
  /**
   * Id of the fromChain
   */
  fromChainId: string;
  /**
   * From chain name
   */
  fromChainName: string;
  /**
   * Token address of bridge token on from chain
   */
  fromTokenAddress: string;
  isAmountTooLow: boolean;
  /**
   * Boolean if sender and recipient address are equal.
   */
  isSenderEqRecipient: boolean;
  /**
   * Lp fee percent, in decimals
   */
  lpFeePct: string;
  /**
   * Lp fee in the bridge token, in decimals
   */
  lpFeeTotal: string;
  /**
   * Lp fee in USD
   */
  lpFeeTotalUsd: string;
  networkFeeNative: string;
  networkFeeNativeToken: string;
  networkFeeUsd: string;
  /**
   * Latency for FE to recieve quote in millisec
   */
  quoteLatencyMilliseconds: string;
  /**
   * Timestamp the FE recieves quote (may be different from the event timestamp)
   */
  quoteTimestamp: string;
  /**
   * Recipient wallet address
   */
  recipient: string;
  /**
   * Address of referee, null if no referral used
   */
  referralProgramAddress?: string;
  /**
   * Relay fee percent, in decimals
   */
  relayFeePct: string;
  /**
   * Relay fee in the gas token, in decimals
   */
  relayFeeTotal: string;
  /**
   * Relay fee in USD
   */
  relayFeeTotalUsd: string;
  /**
   * Relayer gas fee percent, in decimals
   */
  relayGasFeePct: string;
  /**
   * Relayer gas fee in the gas token, in decimals
   */
  relayGasFeeTotal: string;
  /**
   * Relayer fee in USD
   */
  relayGasFeeTotalUsd: string;
  /**
   * Route "{fromChainId}-{toChainId}"
   */
  routeChainIdFromTo: string;
  /**
   * Route "{fromChainName}-{toChainName}"
   */
  routeChainNameFromTo: string;
  /**
   * Sender wallet address
   */
  sender: string;
  /**
   * Result of user signing or rejecting wallet connection
   */
  succeeded: boolean;
  /**
   * Duration in milliseconds between TransferSigned event to the TransferTransactionCompleted event
   */
  timeFromTransferSignedToTransferCompleteInMilliseconds: string;
  /**
   * To amount of bridge token, in decimals
   */
  toAmount: string;
  /**
   * To amount in USD
   */
  toAmountUsd: string;
  /**
   * Id of the toChain
   */
  toChainId: string;
  /**
   * Name of the toChain
   */
  toChainName: string;
  /**
   * Symbol of bridge token
   */
  tokenSymbol: string;
  /**
   * Total bridge fee in the bridge token, in decimals
   */
  totalBridgeFee: string;
  /**
   * Total bridge fee percent, in decimals
   */
  totalBridgeFeePct: string;
  /**
   * Total bridge fee in USD
   */
  totalBridgeFeeUsd: string;
  /**
   * Token address of bridge token on to chain
   */
  toTokenAddress: string;
  /**
   * Resulting transaction hash of transaction, null if "result" if SwapSigned event = failed
   */
  transactionHash: string;
  transferQuoteBlockNumber: string;
}

export interface TransferQuoteReceivedProperties {
  /**
   * Capital fee percent, in decimals
   */
  capitalFeePct: string;
  /**
   * Capital fee in the bridge token, in decimals
   */
  capitalFeeTotal: string;
  /**
   * Capital fee in USD
   */
  capitalFeeTotalUsd: string;
  /**
   * Expected fill time in minutes, as displayed in the UI for the asset and route selected
   */
  expectedFillTimeInMinutes: string;
  /**
   * The lower bound of the expected fill time in minutes, as displayed in the UI for the asset and route selected.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  expectedFillTimeInMinutesLowerBound?: number;
  /**
   * The upper bound of the expected fill time in minutes, as displayed in the UI for the asset and route selected.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  expectedFillTimeInMinutesUpperBound?: number;
  /**
   * From amount in the bridge token, in decimals
   */
  fromAmount: string;
  /**
   * From amount in USD
   */
  fromAmountUsd: string;
  /**
   * From chain id
   */
  fromChainId: string;
  /**
   * From chain name
   */
  fromChainName: string;
  isAmountTooLow: boolean;
  /**
   * Boolean if sender and recipient address are equal.
   */
  isSenderEqRecipient: boolean;
  /**
   * Lp fee percent, in decimals
   */
  lpFeePct: string;
  /**
   * Lp fee in the bridge token, in decimals
   */
  lpFeeTotal: string;
  /**
   * Lp fee in USD
   */
  lpFeeTotalUsd: string;
  /**
   * Latency for FE to recieve quote in millisec
   */
  quoteLatencyMilliseconds: string;
  /**
   * Timestamp the FE recieves quote (may be different from the event timestamp)
   */
  quoteTimestamp: string;
  /**
   * Recipient wallet address
   */
  recipient: string;
  /**
   * Relay fee percent, in decimals
   */
  relayFeePct: string;
  /**
   * Relay fee in the gas token, in decimals
   */
  relayFeeTotal: string;
  /**
   * Relay fee in USD
   */
  relayFeeTotalUsd: string;
  /**
   * Relayer gas fee percent, in decimals
   */
  relayGasFeePct: string;
  /**
   * Relayer gas fee in the gas token, in decimals
   */
  relayGasFeeTotal: string;
  /**
   * Relayer fee in USD
   */
  relayGasFeeTotalUsd: string;
  /**
   * Route "{fromChainId}-{toChainId}"
   */
  routeChainIdFromTo: string;
  /**
   * Route "{fromChainName}-{toChainName}"
   */
  routeChainNameFromTo: string;
  /**
   * Sender wallet address
   */
  sender: string;
  /**
   * To amount of bridge token, in decimals
   */
  toAmount: string;
  /**
   * To amount in USD
   */
  toAmountUsd: string;
  /**
   * Id of the toChain
   */
  toChainId: string;
  /**
   * Name of the toChain
   */
  toChainName: string;
  /**
   * Symbol of bridge token
   */
  tokenSymbol: string;
  /**
   * Total bridge fee in the bridge token, in decimals
   */
  totalBridgeFee: string;
  /**
   * Total bridge fee percent, in decimals
   */
  totalBridgeFeePct: string;
  /**
   * Total bridge fee in USD
   */
  totalBridgeFeeUsd: string;
  transferQuoteBlockNumber: string;
}

export interface TransferSignedProperties {
  /**
   * Capital fee percent, in decimals
   */
  capitalFeePct: string;
  /**
   * Capital fee in the bridge token, in decimals
   */
  capitalFeeTotal: string;
  /**
   * Capital fee in USD
   */
  capitalFeeTotalUsd: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Regex |  |
   */
  expectedFillTimeInMinutes: string;
  /**
   * The lower bound of the expected fill time in minutes, as displayed in the UI for the asset and route selected.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  expectedFillTimeInMinutesLowerBound?: number;
  /**
   * The upper bound of the expected fill time in minutes, as displayed in the UI for the asset and route selected.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  expectedFillTimeInMinutesUpperBound?: number;
  /**
   * From amount in the bridge token, in decimals
   */
  fromAmount: string;
  /**
   * From amount in USD
   */
  fromAmountUsd: string;
  /**
   * From chain id
   */
  fromChainId: string;
  /**
   * From chain name
   */
  fromChainName: string;
  /**
   * Token address of bridge token on from chain
   */
  fromTokenAddress: string;
  isAmountTooLow: boolean;
  isSenderEqRecipient: boolean;
  /**
   * Lp fee percent, in decimals
   */
  lpFeePct: string;
  /**
   * Lp fee in the bridge token, in decimals
   */
  lpFeeTotal: string;
  /**
   * Lp fee in USD
   */
  lpFeeTotalUsd: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Regex |  |
   */
  quoteLatencyMilliseconds: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Regex |  |
   */
  quoteTimestamp: string;
  /**
   * Recipient wallet address
   */
  recipient: string;
  /**
   * Address of referee, null if no referral used
   */
  referralProgramAddress?: string;
  /**
   * Relay fee percent, in decimals
   */
  relayFeePct: string;
  /**
   * Relay fee in the gas token, in decimals
   */
  relayFeeTotal: string;
  /**
   * Relay fee in USD
   */
  relayFeeTotalUsd: string;
  /**
   * Relayer gas fee percent, in decimals
   */
  relayGasFeePct: string;
  /**
   * Relayer gas fee in the gas token, in decimals
   */
  relayGasFeeTotal: string;
  /**
   * Relayer fee in USD
   */
  relayGasFeeTotalUsd: string;
  /**
   * Route "{fromChainId}-{toChainId}"
   */
  routeChainIdFromTo: string;
  /**
   * Route "{fromChainName}-{toChainName}"
   */
  routeChainNameFromTo: string;
  /**
   * Sender wallet address
   */
  sender: string;
  /**
   * Duration in milliseconds between TransferSubmitted event to the TransferSigned event
   */
  timeFromTransferSubmittedToTransferSignedInMilliseconds: string;
  /**
   * To amount of bridge token, in decimals
   */
  toAmount: string;
  /**
   * To amount in USD
   */
  toAmountUsd: string;
  /**
   * Id of the toChain
   */
  toChainId: string;
  /**
   * Name of the toChain
   */
  toChainName: string;
  /**
   * Symbol of bridge token
   */
  tokenSymbol: string;
  /**
   * Total bridge fee in the bridge token, in decimals
   */
  totalBridgeFee: string;
  /**
   * Total bridge fee percent, in decimals
   */
  totalBridgeFeePct: string;
  /**
   * Total bridge fee in USD
   */
  totalBridgeFeeUsd: string;
  /**
   * Token address of bridge token on to chain
   */
  toTokenAddress: string;
  /**
   * Resulting transaction hash of transaction, null if "result" if SwapSigned event = failed
   */
  transactionHash: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Regex |  |
   */
  transferQuoteBlockNumber: string;
}

export interface TransferSubmittedProperties {
  /**
   * Capital fee percent, in decimals
   */
  capitalFeePct: string;
  /**
   * Capital fee in the bridge token, in decimals
   */
  capitalFeeTotal: string;
  /**
   * Capital fee in USD
   */
  capitalFeeTotalUsd: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Regex |  |
   */
  expectedFillTimeInMinutes: string;
  /**
   * The lower bound of the expected fill time in minutes, as displayed in the UI for the asset and route selected.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  expectedFillTimeInMinutesLowerBound?: number;
  /**
   * The upper bound of the expected fill time in minutes, as displayed in the UI for the asset and route selected.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  expectedFillTimeInMinutesUpperBound?: number;
  /**
   * From amount in the bridge token, in decimals
   */
  fromAmount: string;
  /**
   * From amount in USD
   */
  fromAmountUsd: string;
  /**
   * From chain id
   */
  fromChainId: string;
  /**
   * From chain name
   */
  fromChainName: string;
  /**
   * Token address of bridge token on from chain
   */
  fromTokenAddress: string;
  isAmountTooLow: boolean;
  isSenderEqRecipient: boolean;
  /**
   * Lp fee percent, in decimals
   */
  lpFeePct: string;
  /**
   * Lp fee in the bridge token, in decimals
   */
  lpFeeTotal: string;
  /**
   * Lp fee in USD
   */
  lpFeeTotalUsd: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Regex |  |
   */
  quoteLatencyMilliseconds: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Regex |  |
   */
  quoteTimestamp: string;
  /**
   * Recipient wallet address
   */
  recipient: string;
  /**
   * Address of referee, null if no referral used
   */
  referralProgramAddress?: string;
  /**
   * Relay fee percent, in decimals
   */
  relayFeePct: string;
  /**
   * Relay fee in the gas token, in decimals
   */
  relayFeeTotal: string;
  /**
   * Relay fee in USD
   */
  relayFeeTotalUsd: string;
  /**
   * Relayer gas fee percent, in decimals
   */
  relayGasFeePct: string;
  /**
   * Relayer gas fee in the gas token, in decimals
   */
  relayGasFeeTotal: string;
  /**
   * Relayer fee in USD
   */
  relayGasFeeTotalUsd: string;
  /**
   * Route "{fromChainId}-{toChainId}"
   */
  routeChainIdFromTo: string;
  /**
   * Route "{fromChainName}-{toChainName}"
   */
  routeChainNameFromTo: string;
  /**
   * Sender wallet address
   */
  sender: string;
  /**
   * Duration in milliseconds between first TransferQuoteRecieved event to the TransferSubmitted event
   */
  timeFromFirstQuoteToTransferSubmittedInMilliseconds: string;
  /**
   * To amount of bridge token, in decimals
   */
  toAmount: string;
  /**
   * To amount in USD
   */
  toAmountUsd: string;
  /**
   * Id of the toChain
   */
  toChainId: string;
  /**
   * Name of the toChain
   */
  toChainName: string;
  /**
   * Symbol of bridge token
   */
  tokenSymbol: string;
  /**
   * Total bridge fee in the bridge token, in decimals
   */
  totalBridgeFee: string;
  /**
   * Total bridge fee percent, in decimals
   */
  totalBridgeFeePct: string;
  /**
   * Total bridge fee in USD
   */
  totalBridgeFeeUsd: string;
  /**
   * Token address of bridge token on to chain
   */
  toTokenAddress: string;
  transferQuoteBlockNumber: string;
  /**
   * Timestamp when send button was clicked
   */
  transferTimestamp: string;
}

export interface WalletConnectTransactionCompletedProperties {
  /**
   * Boolean if wallet connection was a reconnection.
   */
  isReconnect?: boolean;
  /**
   * Result of user signing or rejecting wallet connection
   */
  succeeded: boolean;
  /**
   * Users' wallet address
   */
  walletAddress?: string;
  /**
   * Type of wallet attempted to connect
   */
  walletType?: string;
}

export interface WalletNetworkSelectedProperties {
  chainId: string;
  /**
   * Name of the fromChain
   */
  chainName: string;
}

export interface WalletSelectedProperties {
  /**
   * Action user did to trigger the event.
   */
  action: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | connectWalletButton, web3OnboardModal, maxButton, quickSwapButton, trackInExplorerLink, monitorDepositProgressLink, earnByAddingLiquidityAndStakingLink, disconnectWalletButton |
   */
  element:
    | "connectWalletButton"
    | "web3OnboardModal"
    | "maxButton"
    | "quickSwapButton"
    | "trackInExplorerLink"
    | "monitorDepositProgressLink"
    | "earnByAddingLiquidityAndStakingLink"
    | "disconnectWalletButton";
  page: string;
  /**
   * Type of wallet attempted to connect
   */
  walletType?: string;
}

export interface WebVitalsProperties {
  /**
   * Ongoing measurement of how visually stable a website page is
   */
  cumulativeLayoutShift: string;
}

export class Identify implements BaseEvent {
  event_type = amplitude.Types.SpecialEventType.IDENTIFY;

  constructor(public event_properties?: IdentifyProperties) {
    this.event_properties = event_properties;
  }
}

export class ApplicationLoaded implements BaseEvent {
  event_type = "ApplicationLoaded";
}

export class ConnectWalletButtonClicked implements BaseEvent {
  event_type = "ConnectWalletButtonClicked";

  constructor(public event_properties: ConnectWalletButtonClickedProperties) {
    this.event_properties = event_properties;
  }
}

export class DepositNetworkMismatch implements BaseEvent {
  event_type = "DepositNetworkMismatch";

  constructor(public event_properties: DepositNetworkMismatchProperties) {
    this.event_properties = event_properties;
  }
}

export class DisconnectWalletButtonClicked implements BaseEvent {
  event_type = "DisconnectWalletButtonClicked";

  constructor(
    public event_properties: DisconnectWalletButtonClickedProperties
  ) {
    this.event_properties = event_properties;
  }
}

export class EarnByAddingLiquidityClicked implements BaseEvent {
  event_type = "EarnByAddingLiquidityClicked";

  constructor(public event_properties: EarnByAddingLiquidityClickedProperties) {
    this.event_properties = event_properties;
  }
}

export class FeesInfoExpanded implements BaseEvent {
  event_type = "FeesInfoExpanded";
}

export class FromChainSelected implements BaseEvent {
  event_type = "FromChainSelected";

  constructor(public event_properties: FromChainSelectedProperties) {
    this.event_properties = event_properties;
  }
}

export class MaxTokenAmountClicked implements BaseEvent {
  event_type = "MaxTokenAmountClicked";

  constructor(public event_properties: MaxTokenAmountClickedProperties) {
    this.event_properties = event_properties;
  }
}

export class MonitorDepositProgressClicked implements BaseEvent {
  event_type = "MonitorDepositProgressClicked";

  constructor(
    public event_properties: MonitorDepositProgressClickedProperties
  ) {
    this.event_properties = event_properties;
  }
}

export class PageViewed implements BaseEvent {
  event_type = "PageViewed";

  constructor(public event_properties: PageViewedProperties) {
    this.event_properties = event_properties;
  }
}

export class QuickSwapButtonClicked implements BaseEvent {
  event_type = "QuickSwapButtonClicked";

  constructor(public event_properties: QuickSwapButtonClickedProperties) {
    this.event_properties = event_properties;
  }
}

export class ToAccountChanged implements BaseEvent {
  event_type = "ToAccountChanged";

  constructor(public event_properties: ToAccountChangedProperties) {
    this.event_properties = event_properties;
  }
}

export class ToChainSelected implements BaseEvent {
  event_type = "ToChainSelected";

  constructor(public event_properties: ToChainSelectedProperties) {
    this.event_properties = event_properties;
  }
}

export class TokenSelected implements BaseEvent {
  event_type = "TokenSelected";

  constructor(public event_properties: TokenSelectedProperties) {
    this.event_properties = event_properties;
  }
}

export class TrackInExplorerClicked implements BaseEvent {
  event_type = "TrackInExplorerClicked";

  constructor(public event_properties: TrackInExplorerClickedProperties) {
    this.event_properties = event_properties;
  }
}

export class TransferDepositCompleted implements BaseEvent {
  event_type = "TransferDepositCompleted";

  constructor(public event_properties: TransferDepositCompletedProperties) {
    this.event_properties = event_properties;
  }
}

export class TransferQuoteReceived implements BaseEvent {
  event_type = "TransferQuoteReceived";

  constructor(public event_properties: TransferQuoteReceivedProperties) {
    this.event_properties = event_properties;
  }
}

export class TransferSigned implements BaseEvent {
  event_type = "TransferSigned";

  constructor(public event_properties: TransferSignedProperties) {
    this.event_properties = event_properties;
  }
}

export class TransferSubmitted implements BaseEvent {
  event_type = "TransferSubmitted";

  constructor(public event_properties: TransferSubmittedProperties) {
    this.event_properties = event_properties;
  }
}

export class WalletConnectTransactionCompleted implements BaseEvent {
  event_type = "WalletConnectTransactionCompleted";

  constructor(
    public event_properties: WalletConnectTransactionCompletedProperties
  ) {
    this.event_properties = event_properties;
  }
}

export class WalletNetworkSelected implements BaseEvent {
  event_type = "WalletNetworkSelected";

  constructor(public event_properties: WalletNetworkSelectedProperties) {
    this.event_properties = event_properties;
  }
}

export class WalletSelected implements BaseEvent {
  event_type = "WalletSelected";

  constructor(public event_properties: WalletSelectedProperties) {
    this.event_properties = event_properties;
  }
}

export class WebVitals implements BaseEvent {
  event_type = "WebVitals";

  constructor(public event_properties: WebVitalsProperties) {
    this.event_properties = event_properties;
  }
}

export type PromiseResult<T> = { promise: Promise<T | void> };

const getVoidPromiseResult = () => ({ promise: Promise.resolve() });

// prettier-ignore
export class Ampli {
  private disabled: boolean = false;
  private amplitude?: BrowserClient;

  get client(): BrowserClient {
    this.isInitializedAndEnabled();
    return this.amplitude!;
  }

  get isLoaded(): boolean {
    return this.amplitude != null;
  }

  private isInitializedAndEnabled(): boolean {
    if (!this.amplitude) {
      console.error('ERROR: Ampli is not yet initialized. Have you called ampli.load() on app start?');
      return false;
    }
    return !this.disabled;
  }

  /**
   * Initialize the Ampli SDK. Call once when your application starts.
   *
   * @param options Configuration options to initialize the Ampli SDK with.
   */
  load(options: LoadOptions): PromiseResult<void> {
    this.disabled = options.disabled ?? false;

    if (this.amplitude) {
      console.warn('WARNING: Ampli is already intialized. Ampli.load() should be called once at application startup.');
      return getVoidPromiseResult();
    }

    let apiKey: string | null = null;
    if (options.client && 'apiKey' in options.client) {
      apiKey = options.client.apiKey;
    } else if ('environment' in options) {
      apiKey = ApiKey[options.environment];
    }

    if (options.client && 'instance' in options.client) {
      this.amplitude = options.client.instance;
    } else if (apiKey) {
      this.amplitude = amplitude.createInstance();
      const configuration = (options.client && 'configuration' in options.client) ? options.client.configuration : {};
      return this.amplitude.init(apiKey, undefined, { ...DefaultConfiguration, ...configuration });
    } else {
      console.error("ERROR: ampli.load() requires 'environment', 'client.apiKey', or 'client.instance'");
    }

    return getVoidPromiseResult();
  }

  /**
   * Identify a user and set user properties.
   *
   * @param userId The user's id.
   * @param properties The user properties.
   * @param options Optional event options.
   */
  identify(
    userId: string | undefined,
    properties?: IdentifyProperties,
    options?: EventOptions,
  ): PromiseResult<Result> {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    if (userId) {
      options = {...options,  user_id: userId};
    }

    const amplitudeIdentify = new amplitude.Identify();
    const eventProperties = properties;
    if (eventProperties != null) {
      for (const [key, value] of Object.entries(eventProperties)) {
        amplitudeIdentify.set(key, value);
      }
    }
    return this.amplitude!.identify(
      amplitudeIdentify,
      options,
    );
  }

 /**
  * Flush the event.
  */
  flush() : PromiseResult<Result> {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    return this.amplitude!.flush();
  }

  /**
   * Track event
   *
   * @param event The event to track.
   * @param options Optional event options.
   */
  track(event: Event, options?: EventOptions): PromiseResult<Result> {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    return this.amplitude!.track(event, undefined, options);
  }

  /**
   * ApplicationLoaded
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/ApplicationLoaded)
   *
   * App is loaded
   *
   * Owner: James Morris
   *
   * @param options Amplitude event options.
   */
  applicationLoaded(
    options?: EventOptions,
  ) {
    return this.track(new ApplicationLoaded(), options);
  }

  /**
   * ConnectWalletButtonClicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/ConnectWalletButtonClicked)
   *
   * User clicks Connect Wallet
   *
   * Owner: James Morris
   *
   * @param properties The event's properties (e.g. action)
   * @param options Amplitude event options.
   */
  connectWalletButtonClicked(
    properties: ConnectWalletButtonClickedProperties,
    options?: EventOptions,
  ) {
    return this.track(new ConnectWalletButtonClicked(properties), options);
  }

  /**
   * DepositNetworkMismatch
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/DepositNetworkMismatch)
   *
   * This event tracks instances where a transfer deposit is attempted to a network that does not match the intended network
   *
   * @param properties The event's properties (e.g. fromChainId)
   * @param options Amplitude event options.
   */
  depositNetworkMismatch(
    properties: DepositNetworkMismatchProperties,
    options?: EventOptions,
  ) {
    return this.track(new DepositNetworkMismatch(properties), options);
  }

  /**
   * DisconnectWalletButtonClicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/DisconnectWalletButtonClicked)
   *
   * User disconnects wallet
   *
   * Owner: James Morris
   *
   * @param properties The event's properties (e.g. action)
   * @param options Amplitude event options.
   */
  disconnectWalletButtonClicked(
    properties: DisconnectWalletButtonClickedProperties,
    options?: EventOptions,
  ) {
    return this.track(new DisconnectWalletButtonClicked(properties), options);
  }

  /**
   * EarnByAddingLiquidityClicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/EarnByAddingLiquidityClicked)
   *
   * This event tracks when a user clicks on the "Earn by Adding Liquidity" CTA within the application
   *
   * @param properties The event's properties (e.g. action)
   * @param options Amplitude event options.
   */
  earnByAddingLiquidityClicked(
    properties: EarnByAddingLiquidityClickedProperties,
    options?: EventOptions,
  ) {
    return this.track(new EarnByAddingLiquidityClicked(properties), options);
  }

  /**
   * FeesInfoExpanded
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/FeesInfoExpanded)
   *
   * User expands fees info
   *
   * Owner: James Morris
   *
   * @param options Amplitude event options.
   */
  feesInfoExpanded(
    options?: EventOptions,
  ) {
    return this.track(new FeesInfoExpanded(), options);
  }

  /**
   * FromChainSelected
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/FromChainSelected)
   *
   * User selects from chain
   *
   * Owner: James Morris
   *
   * @param properties The event's properties (e.g. chainName)
   * @param options Amplitude event options.
   */
  fromChainSelected(
    properties: FromChainSelectedProperties,
    options?: EventOptions,
  ) {
    return this.track(new FromChainSelected(properties), options);
  }

  /**
   * MaxTokenAmountClicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/MaxTokenAmountClicked)
   *
   * User clicks max amount
   *
   * Owner: James Morris
   *
   * @param properties The event's properties (e.g. action)
   * @param options Amplitude event options.
   */
  maxTokenAmountClicked(
    properties: MaxTokenAmountClickedProperties,
    options?: EventOptions,
  ) {
    return this.track(new MaxTokenAmountClicked(properties), options);
  }

  /**
   * MonitorDepositProgressClicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/MonitorDepositProgressClicked)
   *
   * This event tracks when a user clicks on the "Monitor Progress" button within the application
   *
   * @param properties The event's properties (e.g. action)
   * @param options Amplitude event options.
   */
  monitorDepositProgressClicked(
    properties: MonitorDepositProgressClickedProperties,
    options?: EventOptions,
  ) {
    return this.track(new MonitorDepositProgressClicked(properties), options);
  }

  /**
   * PageViewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/PageViewed)
   *
   * User views page
   *
   * Owner: James Morris
   *
   * @param properties The event's properties (e.g. gitCommitHash)
   * @param options Amplitude event options.
   */
  pageViewed(
    properties: PageViewedProperties,
    options?: EventOptions,
  ) {
    return this.track(new PageViewed(properties), options);
  }

  /**
   * QuickSwapButtonClicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/QuickSwapButtonClicked)
   *
   * Owner: James Morris
   *
   * @param properties The event's properties (e.g. action)
   * @param options Amplitude event options.
   */
  quickSwapButtonClicked(
    properties: QuickSwapButtonClickedProperties,
    options?: EventOptions,
  ) {
    return this.track(new QuickSwapButtonClicked(properties), options);
  }

  /**
   * ToAccountChanged
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/ToAccountChanged)
   *
   * User changes recipient address
   *
   * Owner: James Morris
   *
   * @param properties The event's properties (e.g. toWalletAddress)
   * @param options Amplitude event options.
   */
  toAccountChanged(
    properties: ToAccountChangedProperties,
    options?: EventOptions,
  ) {
    return this.track(new ToAccountChanged(properties), options);
  }

  /**
   * ToChainSelected
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/ToChainSelected)
   *
   * User selects from or to chain
   *
   * Owner: James Morris
   *
   * @param properties The event's properties (e.g. chainName)
   * @param options Amplitude event options.
   */
  toChainSelected(
    properties: ToChainSelectedProperties,
    options?: EventOptions,
  ) {
    return this.track(new ToChainSelected(properties), options);
  }

  /**
   * TokenSelected
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/TokenSelected)
   *
   * User selects token
   *
   * Owner: James Morris
   *
   * @param properties The event's properties (e.g. default)
   * @param options Amplitude event options.
   */
  tokenSelected(
    properties: TokenSelectedProperties,
    options?: EventOptions,
  ) {
    return this.track(new TokenSelected(properties), options);
  }

  /**
   * TrackInExplorerClicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/TrackInExplorerClicked)
   *
   * This event tracks when a user clicks on the "Track in explorer" button within the application
   *
   * @param properties The event's properties (e.g. action)
   * @param options Amplitude event options.
   */
  trackInExplorerClicked(
    properties: TrackInExplorerClickedProperties,
    options?: EventOptions,
  ) {
    return this.track(new TrackInExplorerClicked(properties), options);
  }

  /**
   * TransferDepositCompleted
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/TransferDepositCompleted)
   *
   * On-chain transfer completed
   *
   * Owner: Dong-Ha Kim
   *
   * @param properties The event's properties (e.g. capitalFeePct)
   * @param options Amplitude event options.
   */
  transferDepositCompleted(
    properties: TransferDepositCompletedProperties,
    options?: EventOptions,
  ) {
    return this.track(new TransferDepositCompleted(properties), options);
  }

  /**
   * TransferQuoteReceived
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/TransferQuoteReceived)
   *
   * User recieves a quote for bridge transaction
   *
   * Owner: Dong-Ha Kim
   *
   * @param properties The event's properties (e.g. capitalFeePct)
   * @param options Amplitude event options.
   */
  transferQuoteReceived(
    properties: TransferQuoteReceivedProperties,
    options?: EventOptions,
  ) {
    return this.track(new TransferQuoteReceived(properties), options);
  }

  /**
   * TransferSigned
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/TransferSigned)
   *
   * User signs wallet transaction
   *
   * Owner: James Morris
   *
   * @param properties The event's properties (e.g. capitalFeePct)
   * @param options Amplitude event options.
   */
  transferSigned(
    properties: TransferSignedProperties,
    options?: EventOptions,
  ) {
    return this.track(new TransferSigned(properties), options);
  }

  /**
   * TransferSubmitted
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/TransferSubmitted)
   *
   * User clicks send button
   *
   * Owner: James Morris
   *
   * @param properties The event's properties (e.g. capitalFeePct)
   * @param options Amplitude event options.
   */
  transferSubmitted(
    properties: TransferSubmittedProperties,
    options?: EventOptions,
  ) {
    return this.track(new TransferSubmitted(properties), options);
  }

  /**
   * WalletConnectTransactionCompleted
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/WalletConnectTransactionCompleted)
   *
   * User rejects or approves wallet connection
   *
   * Owner: James Morris
   *
   * @param properties The event's properties (e.g. isReconnect)
   * @param options Amplitude event options.
   */
  walletConnectTransactionCompleted(
    properties: WalletConnectTransactionCompletedProperties,
    options?: EventOptions,
  ) {
    return this.track(new WalletConnectTransactionCompleted(properties), options);
  }

  /**
   * WalletNetworkSelected
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/WalletNetworkSelected)
   *
   * Owner: Dong-Ha Kim
   *
   * @param properties The event's properties (e.g. chainId)
   * @param options Amplitude event options.
   */
  walletNetworkSelected(
    properties: WalletNetworkSelectedProperties,
    options?: EventOptions,
  ) {
    return this.track(new WalletNetworkSelected(properties), options);
  }

  /**
   * WalletSelected
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/WalletSelected)
   *
   * User selects wallet to connect
   *
   * Owner: James Morris
   *
   * @param properties The event's properties (e.g. action)
   * @param options Amplitude event options.
   */
  walletSelected(
    properties: WalletSelectedProperties,
    options?: EventOptions,
  ) {
    return this.track(new WalletSelected(properties), options);
  }

  /**
   * WebVitals
   *
   * [View in Tracking Plan](https://data.amplitude.com/risklabs/Risk%20Labs/events/main/latest/WebVitals)
   *
   * Properties to track health of UI
   *
   * Owner: James Morris
   *
   * @param properties The event's properties (e.g. cumulativeLayoutShift)
   * @param options Amplitude event options.
   */
  webVitals(
    properties: WebVitalsProperties,
    options?: EventOptions,
  ) {
    return this.track(new WebVitals(properties), options);
  }
}

export const ampli = new Ampli();

// BASE TYPES
type BrowserOptions = amplitude.Types.BrowserOptions;

export type BrowserClient = amplitude.Types.BrowserClient;
export type BaseEvent = amplitude.Types.BaseEvent;
export type IdentifyEvent = amplitude.Types.IdentifyEvent;
export type GroupEvent = amplitude.Types.GroupIdentifyEvent;
export type Event = amplitude.Types.Event;
export type EventOptions = amplitude.Types.EventOptions;
export type Result = amplitude.Types.Result;
